{
  "openapi": "3.0.0",
  "info": {
    "title": "Ever Works API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for Ever Works website template",
    "contact": {
      "name": "Ever Works Team",
      "url": "https://ever.works"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://your-production-domain.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/admin/categories/{id}": {
      "get": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Get category by ID",
        "description": "Retrieves a specific category by its ID. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category ID",
            "example": "productivity"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 15,
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Update category",
        "description": "Updates a specific category by ID. Only the name can be updated. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category ID",
            "example": "productivity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New category name",
                    "example": "Productivity Tools",
                    "minLength": 2,
                    "maxLength": 100
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity Tools",
                    "isActive": true,
                    "itemCount": 15,
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-20T14:45:00.000Z"
                  },
                  "message": "Category updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category name must be at least 2 characters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category with this name already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Delete category",
        "description": "Deletes a specific category by ID. By default performs soft delete (deactivation). Use 'hard=true' query parameter for permanent deletion. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category ID",
            "example": "productivity"
          },
          {
            "name": "hard",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Perform hard delete (permanent) instead of soft delete",
            "example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "soft_delete": "Category deactivated successfully",
                        "hard_delete": "Category permanently deleted"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/categories/git": {
      "get": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Get Git repository status and categories",
        "description": "Returns Git repository status and categories from the configured GitHub repository. Requires admin privileges and proper GitHub configuration.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Git repository status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "status": {
                      "type": "object",
                      "description": "Git repository status information"
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      },
                      "description": "List of categories from Git repository"
                    },
                    "message": {
                      "type": "string",
                      "example": "Git repository status retrieved successfully"
                    }
                  },
                  "required": [
                    "success",
                    "status",
                    "categories",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "status": {
                    "repository": "ever-co/awesome-time-tracking-data",
                    "branch": "main",
                    "lastCommit": "abc123def456",
                    "lastCommitDate": "2024-01-20T10:30:00.000Z",
                    "lastCommitMessage": "Update categories data",
                    "isUpToDate": true
                  },
                  "categories": [
                    {
                      "id": "productivity",
                      "name": "Productivity",
                      "isActive": true,
                      "itemCount": 15,
                      "createdAt": "2024-01-15T10:30:00.000Z",
                      "updatedAt": "2024-01-15T10:30:00.000Z"
                    },
                    {
                      "id": "design",
                      "name": "Design",
                      "isActive": true,
                      "itemCount": 8,
                      "createdAt": "2024-01-16T11:20:00.000Z",
                      "updatedAt": "2024-01-16T11:20:00.000Z"
                    }
                  ],
                  "message": "Git repository status retrieved successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error - Configuration or Git issues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "config_missing": "DATA_REPOSITORY not configured. Please set DATA_REPOSITORY environment variable.",
                        "invalid_format": "Invalid DATA_REPOSITORY format. Expected: https://github.com/owner/repo",
                        "token_missing": "GitHub token not configured. Please set GITHUB_TOKEN environment variable.",
                        "git_error": "Failed to get Git repository status"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Create category via Git",
        "description": "Creates a new category and commits it to the configured GitHub repository. Requires admin privileges and proper GitHub configuration.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique category identifier",
                    "example": "productivity"
                  },
                  "name": {
                    "type": "string",
                    "description": "Category display name",
                    "example": "Productivity"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created and committed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category created and committed to Git repository"
                    }
                  },
                  "required": [
                    "success",
                    "category",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "category": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 0,
                    "createdAt": "2024-01-20T15:30:00.000Z",
                    "updatedAt": "2024-01-20T15:30:00.000Z"
                  },
                  "message": "Category created and committed to Git repository"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category ID and name are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error - Configuration or Git issues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "config_missing": "DATA_REPOSITORY not configured. Please set DATA_REPOSITORY environment variable.",
                        "invalid_format": "Invalid DATA_REPOSITORY format. Expected: https://github.com/owner/repo",
                        "token_missing": "GitHub token not configured. Please set GH_TOKEN environment variable.",
                        "git_error": "Failed to create category via Git"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/categories/reorder": {
      "put": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Reorder categories",
        "description": "Reorders categories based on provided array of category IDs. The order in the array determines the new display order. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of category IDs in the desired order",
                    "example": [
                      "productivity",
                      "design",
                      "development",
                      "marketing"
                    ],
                    "minItems": 1
                  }
                },
                "required": [
                  "categoryIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Categories reordered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Categories reordered successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Categories reordered successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "not_array": "categoryIds must be an array",
                        "empty_array": "categoryIds array cannot be empty",
                        "invalid_ids": "All category IDs must be strings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to reorder categories"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/categories": {
      "get": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "List categories",
        "description": "Returns a paginated list of categories with optional filtering and sorting. Supports including inactive categories and custom sorting options. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Include inactive categories in the results",
            "example": "false"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "id"
              ],
              "default": "name"
            },
            "description": "Field to sort by",
            "example": "name"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order",
            "example": "asc"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of categories per page",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of categories",
                      "example": 25
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of items per page",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total number of pages",
                      "example": 3
                    }
                  },
                  "required": [
                    "success",
                    "categories",
                    "total",
                    "page",
                    "limit",
                    "totalPages"
                  ]
                },
                "example": {
                  "success": true,
                  "categories": [
                    {
                      "id": "productivity",
                      "name": "Productivity",
                      "isActive": true,
                      "itemCount": 15,
                      "createdAt": "2024-01-15T10:30:00.000Z",
                      "updatedAt": "2024-01-15T10:30:00.000Z"
                    },
                    {
                      "id": "design",
                      "name": "Design",
                      "isActive": true,
                      "itemCount": 8,
                      "createdAt": "2024-01-16T11:20:00.000Z",
                      "updatedAt": "2024-01-16T11:20:00.000Z"
                    },
                    {
                      "id": "development",
                      "name": "Development",
                      "isActive": true,
                      "itemCount": 12,
                      "createdAt": "2024-01-17T09:15:00.000Z",
                      "updatedAt": "2024-01-17T09:15:00.000Z"
                    }
                  ],
                  "total": 25,
                  "page": 1,
                  "limit": 10,
                  "totalPages": 3
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "success": false,
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "success": false,
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch categories"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Create category",
        "description": "Creates a new category with the specified ID and name. The ID is optional and will be auto-generated if not provided. Prevents duplicate category creation. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique category identifier (optional, auto-generated if not provided)",
                    "example": "productivity",
                    "pattern": "^[a-z0-9-]+$"
                  },
                  "name": {
                    "type": "string",
                    "description": "Category display name",
                    "example": "Productivity",
                    "minLength": 2,
                    "maxLength": 100
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "category",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "category": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 0,
                    "createdAt": "2024-01-20T15:30:00.000Z",
                    "updatedAt": "2024-01-20T15:30:00.000Z"
                  },
                  "message": "Category created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_name": "Category name is required",
                        "invalid_format": "Category name must be at least 2 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Category already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Category with this name already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients/{clientId}": {
      "get": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Get client profile by ID",
        "description": "Retrieves a specific client profile by ID. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique client identifier",
            "example": "client_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Client profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientProfile"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "client_123abc",
                    "displayName": "John Doe",
                    "username": "johndoe",
                    "email": "john.doe@example.com",
                    "bio": "Senior Developer with 10+ years experience",
                    "jobTitle": "Lead Developer",
                    "company": "Tech Corp Inc",
                    "status": "active",
                    "plan": "premium",
                    "accountType": "business",
                    "profileImage": "https://cdn.example.com/avatars/johndoe.jpg",
                    "joinedAt": "2024-01-15T10:30:00.000Z",
                    "lastActiveAt": "2024-01-20T14:45:00.000Z",
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-20T14:45:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Client not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch client"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Update client profile",
        "description": "Updates a specific client profile by ID. Supports partial updates. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique client identifier",
            "example": "client_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "description": "Display name for the client",
                    "example": "John Doe Updated"
                  },
                  "username": {
                    "type": "string",
                    "description": "Unique username",
                    "example": "johndoe_updated"
                  },
                  "bio": {
                    "type": "string",
                    "description": "Client biography",
                    "example": "Senior Developer at Tech Corp"
                  },
                  "jobTitle": {
                    "type": "string",
                    "description": "Job title",
                    "example": "Lead Developer"
                  },
                  "company": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Tech Corp Inc"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "suspended",
                      "trial"
                    ],
                    "description": "Client account status",
                    "example": "active"
                  },
                  "plan": {
                    "type": "string",
                    "enum": [
                      "free",
                      "standard",
                      "premium"
                    ],
                    "description": "Subscription plan",
                    "example": "premium"
                  },
                  "accountType": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "business",
                      "enterprise"
                    ],
                    "description": "Account type",
                    "example": "business"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientProfile"
                    },
                    "message": {
                      "type": "string",
                      "example": "Client updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "client_123abc",
                    "displayName": "John Doe Updated",
                    "username": "johndoe_updated",
                    "email": "john.doe@example.com",
                    "bio": "Senior Developer at Tech Corp",
                    "jobTitle": "Lead Developer",
                    "company": "Tech Corp Inc",
                    "status": "active",
                    "plan": "premium",
                    "accountType": "business",
                    "profileImage": "https://cdn.example.com/avatars/johndoe.jpg",
                    "joinedAt": "2024-01-15T10:30:00.000Z",
                    "lastActiveAt": "2024-01-20T16:30:00.000Z",
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-20T16:30:00.000Z"
                  },
                  "message": "Client updated successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Client not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to update client"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Delete client profile",
        "description": "Permanently deletes a client profile by ID. This action cannot be undone. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique client identifier",
            "example": "client_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Client deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Client deleted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Client not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to delete client"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients/advanced-search": {
      "get": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Advanced client search",
        "description": "Performs advanced search on client profiles with multiple filters, sorting options, and date ranges. Supports field-specific searches, numeric filters, and boolean filters. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of clients per page",
            "example": 20
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "General search term for name, email, or username",
            "example": "john"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "suspended",
                "trial"
              ]
            },
            "description": "Filter by client status",
            "example": "active"
          },
          {
            "name": "plan",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "free",
                "standard",
                "premium"
              ]
            },
            "description": "Filter by subscription plan",
            "example": "premium"
          },
          {
            "name": "accountType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "individual",
                "business",
                "enterprise"
              ]
            },
            "description": "Filter by account type",
            "example": "business"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by authentication provider",
            "example": "google"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "name",
                "email",
                "company",
                "totalSubmissions"
              ]
            },
            "description": "Field to sort by",
            "example": "createdAt"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order",
            "example": "desc"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter clients created after this date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter clients created before this date",
            "example": "2024-12-31T23:59:59.000Z"
          },
          {
            "name": "emailDomain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by email domain",
            "example": "example.com"
          },
          {
            "name": "companySearch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search in company names",
            "example": "Tech Corp"
          },
          {
            "name": "minSubmissions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Minimum number of submissions",
            "example": 5
          },
          {
            "name": "maxSubmissions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Maximum number of submissions",
            "example": 100
          },
          {
            "name": "emailVerified",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter by email verification status",
            "example": "true"
          },
          {
            "name": "twoFactorEnabled",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter by two-factor authentication status",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Advanced search completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clients": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClientProfile"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 20
                            },
                            "total": {
                              "type": "integer",
                              "example": 15
                            },
                            "totalPages": {
                              "type": "integer",
                              "example": 1
                            }
                          }
                        },
                        "searchMetadata": {
                          "type": "object",
                          "properties": {
                            "appliedFilters": {
                              "type": "object",
                              "description": "Summary of applied search filters"
                            },
                            "searchTime": {
                              "type": "number",
                              "description": "Search execution time in milliseconds",
                              "example": 45.2
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "clients": [
                      {
                        "id": "client_123abc",
                        "displayName": "John Doe",
                        "username": "johndoe",
                        "email": "john.doe@example.com",
                        "company": "Tech Corp Inc",
                        "status": "active",
                        "plan": "premium",
                        "accountType": "business",
                        "totalSubmissions": 25,
                        "emailVerified": true,
                        "twoFactorEnabled": true,
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "lastActiveAt": "2024-01-20T14:45:00.000Z"
                      }
                    ],
                    "pagination": {
                      "page": 1,
                      "limit": 20,
                      "total": 15,
                      "totalPages": 1
                    },
                    "searchMetadata": {
                      "appliedFilters": {
                        "status": "active",
                        "plan": "premium",
                        "emailVerified": true
                      },
                      "searchTime": 45.2
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to perform advanced search"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients/bulk": {
      "put": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Bulk update client profiles",
        "description": "Updates multiple client profiles in a single request. Processes each client individually and returns detailed results including successes and failures. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clients": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Client ID (required)",
                          "example": "client_123abc"
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Display name",
                          "example": "John Doe Updated"
                        },
                        "username": {
                          "type": "string",
                          "description": "Username",
                          "example": "johndoe_updated"
                        },
                        "bio": {
                          "type": "string",
                          "description": "Biography",
                          "example": "Senior Developer at Tech Corp"
                        },
                        "jobTitle": {
                          "type": "string",
                          "description": "Job title",
                          "example": "Lead Developer"
                        },
                        "company": {
                          "type": "string",
                          "description": "Company name",
                          "example": "Tech Corp Inc"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "inactive",
                            "suspended",
                            "trial"
                          ],
                          "description": "Account status",
                          "example": "active"
                        },
                        "plan": {
                          "type": "string",
                          "enum": [
                            "free",
                            "standard",
                            "premium"
                          ],
                          "description": "Subscription plan",
                          "example": "premium"
                        },
                        "accountType": {
                          "type": "string",
                          "enum": [
                            "individual",
                            "business",
                            "enterprise"
                          ],
                          "description": "Account type",
                          "example": "business"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    "description": "Array of client updates",
                    "minItems": 1,
                    "maxItems": 100
                  }
                },
                "required": [
                  "clients"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk update completed (may include partial failures)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Bulk update completed: 2 successful, 1 failed"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Index in the original array",
                            "example": 0
                          },
                          "success": {
                            "type": "boolean",
                            "example": true
                          },
                          "data": {
                            "$ref": "#/components/schemas/ClientProfile"
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Index in the original array",
                            "example": 2
                          },
                          "error": {
                            "type": "string",
                            "example": "Client not found"
                          },
                          "clientData": {
                            "type": "object",
                            "description": "Original client data that failed"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 3
                        },
                        "successful": {
                          "type": "integer",
                          "example": 2
                        },
                        "failed": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "results",
                    "errors",
                    "summary"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Bulk update completed: 2 successful, 1 failed",
                  "results": [
                    {
                      "index": 0,
                      "success": true,
                      "data": {
                        "id": "client_123abc",
                        "displayName": "John Doe Updated",
                        "username": "johndoe_updated",
                        "email": "john.doe@example.com",
                        "status": "active",
                        "plan": "premium",
                        "updatedAt": "2024-01-20T16:45:00.000Z"
                      }
                    },
                    {
                      "index": 1,
                      "success": true,
                      "data": {
                        "id": "client_456def",
                        "displayName": "Jane Smith Updated",
                        "username": "janesmith_updated",
                        "email": "jane.smith@example.com",
                        "status": "active",
                        "plan": "standard",
                        "updatedAt": "2024-01-20T16:45:00.000Z"
                      }
                    }
                  ],
                  "errors": [
                    {
                      "index": 2,
                      "error": "Client not found",
                      "clientData": {
                        "id": "client_nonexistent",
                        "displayName": "Non Existent"
                      }
                    }
                  ],
                  "summary": {
                    "total": 3,
                    "successful": 2,
                    "failed": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request: clients array is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to process bulk update"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Bulk delete client profiles",
        "description": "Deletes multiple client profiles in a single request. Processes each client individually and returns detailed results including successes and failures. This action cannot be undone. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clients": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Client ID to delete (required)",
                          "example": "client_123abc"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    "description": "Array of client identifiers to delete",
                    "minItems": 1,
                    "maxItems": 100
                  }
                },
                "required": [
                  "clients"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk deletion completed (may include partial failures)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Bulk deletion completed: 2 successful, 1 failed"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Index in the original array",
                            "example": 0
                          },
                          "success": {
                            "type": "boolean",
                            "example": true
                          },
                          "clientId": {
                            "type": "string",
                            "description": "ID of the deleted client",
                            "example": "client_123abc"
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "Index in the original array",
                            "example": 2
                          },
                          "error": {
                            "type": "string",
                            "example": "Client not found"
                          },
                          "clientData": {
                            "type": "object",
                            "description": "Original client data that failed"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 3
                        },
                        "successful": {
                          "type": "integer",
                          "example": 2
                        },
                        "failed": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "results",
                    "errors",
                    "summary"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Bulk deletion completed: 2 successful, 1 failed",
                  "results": [
                    {
                      "index": 0,
                      "success": true,
                      "clientId": "client_123abc"
                    },
                    {
                      "index": 1,
                      "success": true,
                      "clientId": "client_456def"
                    }
                  ],
                  "errors": [
                    {
                      "index": 2,
                      "error": "Client not found",
                      "clientData": {
                        "id": "client_nonexistent"
                      }
                    }
                  ],
                  "summary": {
                    "total": 3,
                    "successful": 2,
                    "failed": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request: clients array is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to process bulk deletion"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients/dashboard": {
      "get": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Get admin dashboard data",
        "description": "Returns comprehensive dashboard data including client statistics, recent clients, and filtered client lists. Supports all filtering options from the main clients endpoint plus additional dashboard-specific metrics. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for client list pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of clients per page",
            "example": 10
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for client name or email",
            "example": "john"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "suspended",
                "trial"
              ]
            },
            "description": "Filter by client status",
            "example": "active"
          },
          {
            "name": "plan",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "free",
                "standard",
                "premium"
              ]
            },
            "description": "Filter by subscription plan",
            "example": "premium"
          },
          {
            "name": "accountType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "individual",
                "business",
                "enterprise"
              ]
            },
            "description": "Filter by account type",
            "example": "business"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by authentication provider",
            "example": "google"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter clients created after this date (YYYY-MM-DD)",
            "example": "2024-01-01"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter clients created before this date (YYYY-MM-DD)",
            "example": "2024-12-31"
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clients": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClientProfile"
                          },
                          "description": "Paginated list of clients"
                        },
                        "stats": {
                          "type": "object",
                          "properties": {
                            "totalClients": {
                              "type": "integer",
                              "description": "Total number of clients",
                              "example": 1247
                            },
                            "activeClients": {
                              "type": "integer",
                              "description": "Number of active clients",
                              "example": 1156
                            },
                            "newClientsThisMonth": {
                              "type": "integer",
                              "description": "New clients registered this month",
                              "example": 45
                            },
                            "planDistribution": {
                              "type": "object",
                              "properties": {
                                "free": {
                                  "type": "integer",
                                  "example": 856
                                },
                                "standard": {
                                  "type": "integer",
                                  "example": 267
                                },
                                "premium": {
                                  "type": "integer",
                                  "example": 124
                                }
                              }
                            },
                            "accountTypeDistribution": {
                              "type": "object",
                              "properties": {
                                "individual": {
                                  "type": "integer",
                                  "example": 789
                                },
                                "business": {
                                  "type": "integer",
                                  "example": 356
                                },
                                "enterprise": {
                                  "type": "integer",
                                  "example": 102
                                }
                              }
                            },
                            "averageSubmissions": {
                              "type": "number",
                              "description": "Average submissions per client",
                              "example": 12.5
                            },
                            "topCompanies": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "company": {
                                    "type": "string",
                                    "example": "Tech Corp Inc"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "example": 25
                                  }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "example": 10
                            },
                            "total": {
                              "type": "integer",
                              "example": 1247
                            },
                            "totalPages": {
                              "type": "integer",
                              "example": 125
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "clients": [
                      {
                        "id": "client_123abc",
                        "displayName": "John Doe",
                        "username": "johndoe",
                        "email": "john.doe@example.com",
                        "company": "Tech Corp Inc",
                        "status": "active",
                        "plan": "premium",
                        "accountType": "business",
                        "totalSubmissions": 25,
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "lastActiveAt": "2024-01-20T14:45:00.000Z"
                      }
                    ],
                    "stats": {
                      "totalClients": 1247,
                      "activeClients": 1156,
                      "newClientsThisMonth": 45,
                      "planDistribution": {
                        "free": 856,
                        "standard": 267,
                        "premium": 124
                      },
                      "accountTypeDistribution": {
                        "individual": 789,
                        "business": 356,
                        "enterprise": 102
                      },
                      "averageSubmissions": 12.5,
                      "topCompanies": [
                        {
                          "company": "Tech Corp Inc",
                          "count": 25
                        },
                        {
                          "company": "StartupCo",
                          "count": 18
                        }
                      ]
                    },
                    "pagination": {
                      "page": 1,
                      "limit": 10,
                      "total": 1247,
                      "totalPages": 125
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch dashboard data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients": {
      "get": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "List client profiles",
        "description": "Returns a paginated list of client profiles with filtering options. Supports search by name/email, status filtering, plan filtering, and account type filtering. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of clients per page",
            "example": 10
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for client name or email",
            "example": "john"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "suspended",
                "trial"
              ]
            },
            "description": "Filter by client status",
            "example": "active"
          },
          {
            "name": "plan",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "free",
                "standard",
                "premium"
              ]
            },
            "description": "Filter by subscription plan",
            "example": "premium"
          },
          {
            "name": "accountType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "individual",
                "business",
                "enterprise"
              ]
            },
            "description": "Filter by account type",
            "example": "business"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by authentication provider",
            "example": "google"
          }
        ],
        "responses": {
          "200": {
            "description": "Client profiles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "clients": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ClientProfile"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "total": {
                          "type": "integer",
                          "example": 47
                        },
                        "limit": {
                          "type": "integer",
                          "example": 10
                        }
                      },
                      "required": [
                        "page",
                        "totalPages",
                        "total",
                        "limit"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "meta"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "clients": [
                      {
                        "id": "client_123abc",
                        "displayName": "John Doe",
                        "username": "johndoe",
                        "email": "john.doe@example.com",
                        "bio": "Senior Developer with 10+ years experience",
                        "jobTitle": "Lead Developer",
                        "company": "Tech Corp Inc",
                        "status": "active",
                        "plan": "premium",
                        "accountType": "business",
                        "joinedAt": "2024-01-15T10:30:00.000Z",
                        "lastActiveAt": "2024-01-20T14:45:00.000Z"
                      },
                      {
                        "id": "client_456def",
                        "displayName": "Jane Smith",
                        "username": "janesmith",
                        "email": "jane.smith@example.com",
                        "bio": "Product Manager at StartupCo",
                        "jobTitle": "Product Manager",
                        "company": "StartupCo",
                        "status": "active",
                        "plan": "standard",
                        "accountType": "individual",
                        "joinedAt": "2024-01-16T09:15:00.000Z",
                        "lastActiveAt": "2024-01-20T16:20:00.000Z"
                      }
                    ]
                  },
                  "meta": {
                    "page": 1,
                    "totalPages": 5,
                    "total": 47,
                    "limit": 10
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch clients"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Create client profile",
        "description": "Creates a new client profile. If the user doesn't exist, creates a new user account with a temporary password. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Client email address (required)",
                    "example": "john.doe@example.com"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display name for the client",
                    "example": "John Doe"
                  },
                  "username": {
                    "type": "string",
                    "description": "Unique username",
                    "example": "johndoe"
                  },
                  "bio": {
                    "type": "string",
                    "description": "Client biography",
                    "example": "Senior Developer at Tech Corp"
                  },
                  "jobTitle": {
                    "type": "string",
                    "description": "Job title",
                    "example": "Senior Developer"
                  },
                  "company": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Tech Corp"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "suspended",
                      "trial"
                    ],
                    "default": "active",
                    "description": "Client account status",
                    "example": "active"
                  },
                  "plan": {
                    "type": "string",
                    "enum": [
                      "free",
                      "standard",
                      "premium"
                    ],
                    "default": "free",
                    "description": "Subscription plan",
                    "example": "premium"
                  },
                  "accountType": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "business",
                      "enterprise"
                    ],
                    "default": "individual",
                    "description": "Account type",
                    "example": "business"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientProfile"
                    },
                    "message": {
                      "type": "string",
                      "example": "Client created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "client_789ghi",
                    "displayName": "John Doe",
                    "username": "johndoe",
                    "email": "john.doe@example.com",
                    "bio": "Senior Developer at Tech Corp",
                    "jobTitle": "Senior Developer",
                    "company": "Tech Corp",
                    "status": "active",
                    "plan": "premium",
                    "accountType": "business",
                    "profileImage": null,
                    "joinedAt": "2024-01-20T16:45:00.000Z",
                    "lastActiveAt": "2024-01-20T16:45:00.000Z",
                    "createdAt": "2024-01-20T16:45:00.000Z",
                    "updatedAt": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Client created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or user creation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_email": "Email is required",
                        "user_creation_failed": "Failed to create user: [error details]",
                        "invalid_user": "Failed to create or find user for client"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create client"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/clients/stats": {
      "get": {
        "tags": [
          "Admin - Clients"
        ],
        "summary": "Get enhanced client statistics",
        "description": "Returns comprehensive client statistics including totals, distributions, trends, and analytics. Provides detailed insights for admin dashboard and reporting. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Client statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "overview": {
                          "type": "object",
                          "properties": {
                            "totalClients": {
                              "type": "integer",
                              "description": "Total number of clients",
                              "example": 1247
                            },
                            "activeClients": {
                              "type": "integer",
                              "description": "Number of active clients",
                              "example": 1156
                            },
                            "inactiveClients": {
                              "type": "integer",
                              "description": "Number of inactive clients",
                              "example": 67
                            },
                            "suspendedClients": {
                              "type": "integer",
                              "description": "Number of suspended clients",
                              "example": 24
                            },
                            "trialClients": {
                              "type": "integer",
                              "description": "Number of trial clients",
                              "example": 89
                            }
                          }
                        },
                        "growth": {
                          "type": "object",
                          "properties": {
                            "newClientsToday": {
                              "type": "integer",
                              "description": "New clients registered today",
                              "example": 3
                            },
                            "newClientsThisWeek": {
                              "type": "integer",
                              "description": "New clients registered this week",
                              "example": 18
                            },
                            "newClientsThisMonth": {
                              "type": "integer",
                              "description": "New clients registered this month",
                              "example": 45
                            },
                            "growthRate": {
                              "type": "number",
                              "description": "Monthly growth rate percentage",
                              "example": 3.8
                            }
                          }
                        },
                        "plans": {
                          "type": "object",
                          "properties": {
                            "free": {
                              "type": "integer",
                              "description": "Number of free plan clients",
                              "example": 856
                            },
                            "standard": {
                              "type": "integer",
                              "description": "Number of standard plan clients",
                              "example": 267
                            },
                            "premium": {
                              "type": "integer",
                              "description": "Number of premium plan clients",
                              "example": 124
                            },
                            "conversionRate": {
                              "type": "number",
                              "description": "Free to paid conversion rate percentage",
                              "example": 31.4
                            }
                          }
                        },
                        "accountTypes": {
                          "type": "object",
                          "properties": {
                            "individual": {
                              "type": "integer",
                              "description": "Number of individual accounts",
                              "example": 789
                            },
                            "business": {
                              "type": "integer",
                              "description": "Number of business accounts",
                              "example": 356
                            },
                            "enterprise": {
                              "type": "integer",
                              "description": "Number of enterprise accounts",
                              "example": 102
                            }
                          }
                        },
                        "engagement": {
                          "type": "object",
                          "properties": {
                            "averageSubmissions": {
                              "type": "number",
                              "description": "Average submissions per client",
                              "example": 12.5
                            },
                            "totalSubmissions": {
                              "type": "integer",
                              "description": "Total submissions across all clients",
                              "example": 15587
                            },
                            "activeThisWeek": {
                              "type": "integer",
                              "description": "Clients active in the last 7 days",
                              "example": 892
                            },
                            "activeThisMonth": {
                              "type": "integer",
                              "description": "Clients active in the last 30 days",
                              "example": 1034
                            }
                          }
                        },
                        "demographics": {
                          "type": "object",
                          "properties": {
                            "topCountries": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "country": {
                                    "type": "string",
                                    "example": "United States"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "example": 456
                                  }
                                }
                              }
                            },
                            "topCompanies": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "company": {
                                    "type": "string",
                                    "example": "Tech Corp Inc"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "example": 25
                                  }
                                }
                              }
                            },
                            "topIndustries": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "industry": {
                                    "type": "string",
                                    "example": "Technology"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "example": 234
                                  }
                                }
                              }
                            }
                          }
                        },
                        "providers": {
                          "type": "object",
                          "properties": {
                            "google": {
                              "type": "integer",
                              "description": "Clients using Google authentication",
                              "example": 567
                            },
                            "github": {
                              "type": "integer",
                              "description": "Clients using GitHub authentication",
                              "example": 234
                            },
                            "email": {
                              "type": "integer",
                              "description": "Clients using email authentication",
                              "example": 446
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "overview": {
                      "totalClients": 1247,
                      "activeClients": 1156,
                      "inactiveClients": 67,
                      "suspendedClients": 24,
                      "trialClients": 89
                    },
                    "growth": {
                      "newClientsToday": 3,
                      "newClientsThisWeek": 18,
                      "newClientsThisMonth": 45,
                      "growthRate": 3.8
                    },
                    "plans": {
                      "free": 856,
                      "standard": 267,
                      "premium": 124,
                      "conversionRate": 31.4
                    },
                    "accountTypes": {
                      "individual": 789,
                      "business": 356,
                      "enterprise": 102
                    },
                    "engagement": {
                      "averageSubmissions": 12.5,
                      "totalSubmissions": 15587,
                      "activeThisWeek": 892,
                      "activeThisMonth": 1034
                    },
                    "demographics": {
                      "topCountries": [
                        {
                          "country": "United States",
                          "count": 456
                        },
                        {
                          "country": "Canada",
                          "count": 234
                        }
                      ],
                      "topCompanies": [
                        {
                          "company": "Tech Corp Inc",
                          "count": 25
                        },
                        {
                          "company": "StartupCo",
                          "count": 18
                        }
                      ],
                      "topIndustries": [
                        {
                          "industry": "Technology",
                          "count": 234
                        },
                        {
                          "industry": "Finance",
                          "count": 156
                        }
                      ]
                    },
                    "providers": {
                      "google": 567,
                      "github": 234,
                      "email": 446
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch client stats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/comments/{id}": {
      "get": {
        "tags": [
          "Admin - Comments"
        ],
        "summary": "Get comment by ID",
        "description": "Retrieves a specific comment by its ID with complete user information. Returns detailed comment data including content, rating, timestamps, and associated user profile. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comment ID",
            "example": "comment_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Comment ID",
                          "example": "comment_123abc"
                        },
                        "content": {
                          "type": "string",
                          "description": "Comment content",
                          "example": "This is a great product! Highly recommended."
                        },
                        "rating": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 1,
                          "maximum": 5,
                          "description": "Rating given with the comment",
                          "example": 5
                        },
                        "userId": {
                          "type": "string",
                          "description": "ID of the user who wrote the comment",
                          "example": "user_456def"
                        },
                        "itemId": {
                          "type": "string",
                          "description": "ID of the item being commented on",
                          "example": "item_789ghi"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Comment creation timestamp",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Comment last update timestamp",
                          "example": "2024-01-20T14:45:00.000Z"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "User ID",
                              "example": "user_456def"
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "description": "User display name",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "description": "User email address",
                              "example": "john.doe@example.com"
                            },
                            "image": {
                              "type": "string",
                              "nullable": true,
                              "description": "User avatar image URL",
                              "example": "https://example.com/avatar.jpg"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "comment_123abc",
                    "content": "This is a great product! Highly recommended.",
                    "rating": 5,
                    "userId": "user_456def",
                    "itemId": "item_789ghi",
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T14:45:00.000Z",
                    "user": {
                      "id": "user_456def",
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "image": "https://example.com/avatar.jpg"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Comment not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Comments"
        ],
        "summary": "Update comment content",
        "description": "Updates the content of a specific comment. Only the comment content can be modified. The comment must exist and not be deleted. Returns the updated comment with complete user information. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comment ID",
            "example": "comment_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "New comment content",
                    "minLength": 1,
                    "example": "This is an updated comment with more details."
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Comment ID",
                          "example": "comment_123abc"
                        },
                        "content": {
                          "type": "string",
                          "description": "Updated comment content",
                          "example": "This is an updated comment with more details."
                        },
                        "rating": {
                          "type": "integer",
                          "nullable": true,
                          "minimum": 1,
                          "maximum": 5,
                          "description": "Rating given with the comment",
                          "example": 5
                        },
                        "userId": {
                          "type": "string",
                          "description": "ID of the user who wrote the comment",
                          "example": "user_456def"
                        },
                        "itemId": {
                          "type": "string",
                          "description": "ID of the item being commented on",
                          "example": "item_789ghi"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Comment creation timestamp",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Comment last update timestamp",
                          "example": "2024-01-20T16:15:00.000Z"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "User ID",
                              "example": "user_456def"
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "description": "User display name",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "description": "User email address",
                              "example": "john.doe@example.com"
                            },
                            "image": {
                              "type": "string",
                              "nullable": true,
                              "description": "User avatar image URL",
                              "example": "https://example.com/avatar.jpg"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Comment updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "comment_123abc",
                    "content": "This is an updated comment with more details.",
                    "rating": 5,
                    "userId": "user_456def",
                    "itemId": "item_789ghi",
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T16:15:00.000Z",
                    "user": {
                      "id": "user_456def",
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "image": "https://example.com/avatar.jpg"
                    }
                  },
                  "message": "Comment updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Content is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Comment not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Comments"
        ],
        "summary": "Delete comment",
        "description": "Performs a soft delete on a specific comment by marking it as deleted. The comment must exist and not already be deleted. This action cannot be undone through the API. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comment ID to delete",
            "example": "comment_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Comment deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Comment deleted successfully"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Comment not found or already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Comment not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/comments": {
      "get": {
        "tags": [
          "Admin - Comments"
        ],
        "summary": "Get paginated comments list",
        "description": "Returns a paginated list of comments with user information and search functionality. Supports filtering by comment content, user name, or user email. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of comments per page",
            "example": 10
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for comment content, user name, or user email",
            "example": "great product"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "comments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Comment ID",
                                "example": "comment_123abc"
                              },
                              "content": {
                                "type": "string",
                                "description": "Comment content",
                                "example": "This is a great product! Highly recommended."
                              },
                              "rating": {
                                "type": "integer",
                                "nullable": true,
                                "minimum": 1,
                                "maximum": 5,
                                "description": "Rating given with the comment",
                                "example": 5
                              },
                              "userId": {
                                "type": "string",
                                "description": "ID of the user who wrote the comment",
                                "example": "user_456def"
                              },
                              "itemId": {
                                "type": "string",
                                "description": "ID of the item being commented on",
                                "example": "item_789ghi"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "description": "Comment creation timestamp",
                                "example": "2024-01-20T10:30:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "description": "Comment last update timestamp",
                                "example": "2024-01-20T14:45:00.000Z"
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "User ID",
                                    "example": "user_456def"
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "User display name",
                                    "example": "John Doe"
                                  },
                                  "email": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "User email address",
                                    "example": "john.doe@example.com"
                                  },
                                  "image": {
                                    "type": "string",
                                    "nullable": true,
                                    "description": "User avatar image URL",
                                    "example": "https://example.com/avatar.jpg"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "description": "Total number of comments",
                              "example": 156
                            },
                            "page": {
                              "type": "integer",
                              "description": "Current page number",
                              "example": 1
                            },
                            "limit": {
                              "type": "integer",
                              "description": "Number of comments per page",
                              "example": 10
                            },
                            "totalPages": {
                              "type": "integer",
                              "description": "Total number of pages",
                              "example": 16
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "comments": [
                      {
                        "id": "comment_123abc",
                        "content": "This is a great product! Highly recommended.",
                        "rating": 5,
                        "userId": "user_456def",
                        "itemId": "item_789ghi",
                        "createdAt": "2024-01-20T10:30:00.000Z",
                        "updatedAt": "2024-01-20T10:30:00.000Z",
                        "user": {
                          "id": "user_456def",
                          "name": "John Doe",
                          "email": "john.doe@example.com",
                          "image": "https://example.com/avatar.jpg"
                        }
                      },
                      {
                        "id": "comment_234bcd",
                        "content": "Good quality, fast delivery.",
                        "rating": 4,
                        "userId": "user_567efg",
                        "itemId": "item_890jkl",
                        "createdAt": "2024-01-19T15:20:00.000Z",
                        "updatedAt": "2024-01-19T15:20:00.000Z",
                        "user": {
                          "id": "user_567efg",
                          "name": "Jane Smith",
                          "email": "jane.smith@example.com",
                          "image": null
                        }
                      }
                    ],
                    "pagination": {
                      "total": 156,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 16
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/dashboard/stats": {
      "get": {
        "tags": [
          "Admin - Dashboard"
        ],
        "summary": "Get comprehensive dashboard statistics",
        "description": "Returns complete dashboard statistics including user metrics, activity data, newsletter stats, submission analytics, and chart data for the admin dashboard. Includes user growth trends, activity patterns, top items, and recent activity. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer",
                          "description": "Total number of users in the system",
                          "example": 1247
                        },
                        "registeredUsers": {
                          "type": "integer",
                          "description": "Number of registered users",
                          "example": 1156
                        },
                        "newUsersToday": {
                          "type": "integer",
                          "description": "New users registered today",
                          "example": 5
                        },
                        "newUsersLast7Days": {
                          "type": "integer",
                          "description": "New users registered in the last 7 days",
                          "example": 23
                        },
                        "newUsersLast30Days": {
                          "type": "integer",
                          "description": "New users registered in the last 30 days",
                          "example": 89
                        },
                        "totalViews": {
                          "type": "integer",
                          "description": "Total page views across the platform",
                          "example": 45678
                        },
                        "totalVotes": {
                          "type": "integer",
                          "description": "Total votes cast on items",
                          "example": 3456
                        },
                        "totalComments": {
                          "type": "integer",
                          "description": "Total comments posted",
                          "example": 789
                        },
                        "totalSubscribers": {
                          "type": "integer",
                          "description": "Total newsletter subscribers",
                          "example": 2345
                        },
                        "recentSubscribers": {
                          "type": "integer",
                          "description": "Recent newsletter subscribers",
                          "example": 45
                        },
                        "totalSubmissions": {
                          "type": "integer",
                          "description": "Total item submissions",
                          "example": 567
                        },
                        "pendingSubmissions": {
                          "type": "integer",
                          "description": "Submissions awaiting review",
                          "example": 23
                        },
                        "approvedSubmissions": {
                          "type": "integer",
                          "description": "Approved submissions",
                          "example": 456
                        },
                        "rejectedSubmissions": {
                          "type": "integer",
                          "description": "Rejected submissions",
                          "example": 88
                        },
                        "submissionStatusData": {
                          "type": "array",
                          "description": "Submission status data for charts",
                          "items": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "example": "Approved"
                              },
                              "count": {
                                "type": "integer",
                                "example": 456
                              },
                              "color": {
                                "type": "string",
                                "example": "#10B981"
                              }
                            }
                          }
                        },
                        "userGrowthData": {
                          "type": "array",
                          "description": "User growth data for the last 12 months",
                          "items": {
                            "type": "object",
                            "properties": {
                              "month": {
                                "type": "string",
                                "example": "2024-01"
                              },
                              "users": {
                                "type": "integer",
                                "example": 123
                              }
                            }
                          }
                        },
                        "activityTrendData": {
                          "type": "array",
                          "description": "Activity trend data for the last 14 days",
                          "items": {
                            "type": "object",
                            "properties": {
                              "date": {
                                "type": "string",
                                "format": "date",
                                "example": "2024-01-20"
                              },
                              "views": {
                                "type": "integer",
                                "example": 234
                              },
                              "votes": {
                                "type": "integer",
                                "example": 45
                              },
                              "comments": {
                                "type": "integer",
                                "example": 12
                              }
                            }
                          }
                        },
                        "topItemsData": {
                          "type": "array",
                          "description": "Top 10 most popular items",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "item_123abc"
                              },
                              "name": {
                                "type": "string",
                                "example": "Awesome Tool"
                              },
                              "views": {
                                "type": "integer",
                                "example": 1234
                              },
                              "votes": {
                                "type": "integer",
                                "example": 89
                              }
                            }
                          }
                        },
                        "recentActivity": {
                          "type": "array",
                          "description": "Recent activity feed (last 20 activities)",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "activity_456def"
                              },
                              "type": {
                                "type": "string",
                                "example": "comment"
                              },
                              "user": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "item": {
                                "type": "string",
                                "example": "Awesome Tool"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2024-01-20T14:30:00.000Z"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "totalUsers": 1247,
                    "registeredUsers": 1156,
                    "newUsersToday": 5,
                    "newUsersLast7Days": 23,
                    "newUsersLast30Days": 89,
                    "totalViews": 45678,
                    "totalVotes": 3456,
                    "totalComments": 789,
                    "totalSubscribers": 2345,
                    "recentSubscribers": 45,
                    "totalSubmissions": 567,
                    "pendingSubmissions": 23,
                    "approvedSubmissions": 456,
                    "rejectedSubmissions": 88,
                    "submissionStatusData": [
                      {
                        "status": "Approved",
                        "count": 456,
                        "color": "#10B981"
                      },
                      {
                        "status": "Pending",
                        "count": 23,
                        "color": "#F59E0B"
                      },
                      {
                        "status": "Rejected",
                        "count": 88,
                        "color": "#EF4444"
                      }
                    ],
                    "userGrowthData": [
                      {
                        "month": "2024-01",
                        "users": 123
                      },
                      {
                        "month": "2024-02",
                        "users": 145
                      }
                    ],
                    "activityTrendData": [
                      {
                        "date": "2024-01-20",
                        "views": 234,
                        "votes": 45,
                        "comments": 12
                      },
                      {
                        "date": "2024-01-21",
                        "views": 267,
                        "votes": 52,
                        "comments": 15
                      }
                    ],
                    "topItemsData": [
                      {
                        "id": "item_123abc",
                        "name": "Awesome Tool",
                        "views": 1234,
                        "votes": 89
                      },
                      {
                        "id": "item_456def",
                        "name": "Great App",
                        "views": 987,
                        "votes": 76
                      }
                    ],
                    "recentActivity": [
                      {
                        "id": "activity_456def",
                        "type": "comment",
                        "user": "John Doe",
                        "item": "Awesome Tool",
                        "timestamp": "2024-01-20T14:30:00.000Z"
                      },
                      {
                        "id": "activity_789ghi",
                        "type": "vote",
                        "user": "Jane Smith",
                        "item": "Great App",
                        "timestamp": "2024-01-20T14:25:00.000Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/featured-items/{id}": {
      "get": {
        "tags": [
          "Admin - Featured Items"
        ],
        "summary": "Get featured item by ID",
        "description": "Retrieves a specific featured item by its ID with complete details including metadata, status, and timestamps. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Featured item ID",
            "example": "featured_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Featured item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/FeaturedItem"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "featured_123abc",
                    "itemSlug": "awesome-productivity-tool",
                    "itemName": "Awesome Productivity Tool",
                    "itemIconUrl": "https://example.com/icons/productivity-tool.png",
                    "itemCategory": "Productivity",
                    "itemDescription": "A powerful tool to boost your productivity",
                    "featuredOrder": 10,
                    "featuredAt": "2024-01-20T10:30:00.000Z",
                    "featuredUntil": "2024-12-31T23:59:59.000Z",
                    "featuredBy": "user_456def",
                    "isActive": true,
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Featured item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Featured item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch featured item"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Featured Items"
        ],
        "summary": "Update featured item",
        "description": "Updates a featured item's properties including name, icon, category, description, order, expiration date, and active status. All fields are optional. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Featured item ID",
            "example": "featured_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemName": {
                    "type": "string",
                    "description": "Display name of the item",
                    "example": "Updated Productivity Tool"
                  },
                  "itemIconUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to the item's icon/logo",
                    "example": "https://example.com/icons/updated-tool.png"
                  },
                  "itemCategory": {
                    "type": "string",
                    "description": "Category of the item",
                    "example": "Business Tools"
                  },
                  "itemDescription": {
                    "type": "string",
                    "description": "Brief description of the item",
                    "example": "An enhanced tool for business productivity"
                  },
                  "featuredOrder": {
                    "type": "integer",
                    "description": "Display order (higher numbers appear first)",
                    "example": 15
                  },
                  "featuredUntil": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional expiration date for featuring",
                    "example": "2024-12-31T23:59:59.000Z"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Whether the featured item is active",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Featured item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/FeaturedItem"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Featured item updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "featured_123abc",
                    "itemSlug": "awesome-productivity-tool",
                    "itemName": "Updated Productivity Tool",
                    "itemIconUrl": "https://example.com/icons/updated-tool.png",
                    "itemCategory": "Business Tools",
                    "itemDescription": "An enhanced tool for business productivity",
                    "featuredOrder": 15,
                    "featuredAt": "2024-01-20T10:30:00.000Z",
                    "featuredUntil": "2024-12-31T23:59:59.000Z",
                    "featuredBy": "user_456def",
                    "isActive": true,
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Featured item updated successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Featured item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Featured item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update featured item"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Featured Items"
        ],
        "summary": "Remove featured item",
        "description": "Performs a soft delete on a featured item by setting isActive to false. The item remains in the database but is no longer featured. This action can be reversed by updating the item's isActive status. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Featured item ID to remove",
            "example": "featured_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Featured item removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Featured item removed successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Featured item removed successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Featured item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Featured item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to remove featured item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/featured-items": {
      "get": {
        "tags": [
          "Admin - Featured Items"
        ],
        "summary": "List featured items",
        "description": "Returns a paginated list of featured items with optional filtering by active status. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter by active status (true = only active items)",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Featured items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FeaturedItem"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 10
                        },
                        "total": {
                          "type": "integer",
                          "example": 25
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 3
                        },
                        "hasNext": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPrev": {
                          "type": "boolean",
                          "example": false
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "totalPages",
                        "hasNext",
                        "hasPrev"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "success": false,
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "success": false,
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch featured items"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Featured Items"
        ],
        "summary": "Create featured item",
        "description": "Features an item by adding it to the featured items list. Prevents duplicate featuring of the same item. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemSlug": {
                    "type": "string",
                    "description": "Unique item identifier/slug",
                    "example": "awesome-productivity-tool"
                  },
                  "itemName": {
                    "type": "string",
                    "description": "Display name of the item",
                    "example": "Awesome Productivity Tool"
                  },
                  "itemIconUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to the item's icon/logo",
                    "example": "https://example.com/icons/productivity-tool.png"
                  },
                  "itemCategory": {
                    "type": "string",
                    "description": "Category of the item",
                    "example": "Productivity"
                  },
                  "itemDescription": {
                    "type": "string",
                    "description": "Brief description of the item",
                    "example": "A powerful tool to boost your productivity"
                  },
                  "featuredOrder": {
                    "type": "integer",
                    "description": "Display order (higher numbers appear first)",
                    "default": 0,
                    "example": 10
                  },
                  "featuredUntil": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional expiration date for featuring",
                    "example": "2024-12-31T23:59:59.000Z"
                  }
                },
                "required": [
                  "itemSlug",
                  "itemName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item featured successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/FeaturedItem"
                    },
                    "message": {
                      "type": "string",
                      "example": "Item featured successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or item already featured",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_fields": "Item slug and name are required",
                        "already_featured": "Item is already featured"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create featured item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/items/{id}/review": {
      "post": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Review item (approve/reject)",
        "description": "Reviews an item by approving or rejecting it with optional review notes. Changes the item status and records the review decision. This is typically used for moderating submitted items. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to review",
            "example": "item_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "approved",
                      "rejected"
                    ],
                    "description": "Review decision",
                    "example": "approved"
                  },
                  "review_notes": {
                    "type": "string",
                    "description": "Optional review notes explaining the decision",
                    "example": "Great tool, meets all quality standards. Approved for listing."
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item reviewed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Item"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Item approved successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "item_123abc",
                    "name": "Awesome Productivity Tool",
                    "slug": "awesome-productivity-tool",
                    "description": "A powerful tool to boost your productivity",
                    "source_url": "https://example.com/tool",
                    "category": [
                      "productivity",
                      "business"
                    ],
                    "tags": [
                      "saas",
                      "productivity",
                      "collaboration"
                    ],
                    "featured": false,
                    "icon_url": "https://example.com/icon.png",
                    "status": "approved",
                    "review_notes": "Great tool, meets all quality standards. Approved for listing.",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T16:45:00.000Z",
                    "reviewed_at": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Item approved successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid review status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Review status must be either 'approved' or 'rejected'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to review item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/items/{id}": {
      "get": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Get item by ID",
        "description": "Retrieves a specific item by its ID with complete details including metadata, status, categories, tags, and all associated information. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Item"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "item_123abc",
                    "name": "Awesome Productivity Tool",
                    "slug": "awesome-productivity-tool",
                    "description": "A powerful tool to boost your productivity",
                    "source_url": "https://example.com/tool",
                    "category": [
                      "productivity",
                      "business"
                    ],
                    "tags": [
                      "saas",
                      "productivity",
                      "collaboration"
                    ],
                    "featured": true,
                    "icon_url": "https://example.com/icon.png",
                    "status": "approved",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T14:45:00.000Z",
                    "review_notes": "Great tool, approved for listing",
                    "views": 1234,
                    "votes": 89,
                    "rating": 4.5
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch item"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Update item",
        "description": "Updates a specific item's properties including name, description, categories, tags, status, and other metadata. All fields are optional and only provided fields will be updated. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID",
            "example": "item_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Item name",
                    "example": "Updated Productivity Tool"
                  },
                  "slug": {
                    "type": "string",
                    "description": "URL-friendly slug",
                    "example": "updated-productivity-tool"
                  },
                  "description": {
                    "type": "string",
                    "description": "Item description",
                    "example": "An enhanced tool to boost your productivity"
                  },
                  "source_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Source URL of the item",
                    "example": "https://example.com/updated-tool"
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Item categories",
                    "example": [
                      "productivity",
                      "business",
                      "automation"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Item tags",
                    "example": [
                      "saas",
                      "productivity",
                      "automation",
                      "ai"
                    ]
                  },
                  "featured": {
                    "type": "boolean",
                    "description": "Whether the item is featured",
                    "example": true
                  },
                  "icon_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to the item's icon",
                    "example": "https://example.com/updated-icon.png"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "pending",
                      "approved",
                      "rejected"
                    ],
                    "description": "Item status",
                    "example": "approved"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Item"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Item updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "item_123abc",
                    "name": "Updated Productivity Tool",
                    "slug": "updated-productivity-tool",
                    "description": "An enhanced tool to boost your productivity",
                    "source_url": "https://example.com/updated-tool",
                    "category": [
                      "productivity",
                      "business",
                      "automation"
                    ],
                    "tags": [
                      "saas",
                      "productivity",
                      "automation",
                      "ai"
                    ],
                    "featured": true,
                    "icon_url": "https://example.com/updated-icon.png",
                    "status": "approved",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Item updated successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update item"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Delete item",
        "description": "Permanently deletes a specific item from the system. This action cannot be undone. All associated data including votes, comments, and analytics will be removed. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to delete",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Item deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Item deleted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/items": {
      "get": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Get paginated items list",
        "description": "Returns a paginated list of items with optional filtering by status, category, and tags. Supports comprehensive filtering and search capabilities for admin management. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page",
            "example": 10
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "pending",
                "approved",
                "rejected"
              ]
            },
            "description": "Filter by item status",
            "example": "approved"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by category",
            "example": "productivity"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by tag",
            "example": "saas"
          }
        ],
        "responses": {
          "200": {
            "description": "Items list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Item"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of items",
                      "example": 156
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of items per page",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total number of pages",
                      "example": 16
                    }
                  },
                  "required": [
                    "success",
                    "items",
                    "total",
                    "page",
                    "limit",
                    "totalPages"
                  ]
                },
                "example": {
                  "success": true,
                  "items": [
                    {
                      "id": "item_123abc",
                      "name": "Awesome Productivity Tool",
                      "slug": "awesome-productivity-tool",
                      "description": "A powerful tool to boost your productivity",
                      "source_url": "https://example.com/tool",
                      "category": [
                        "productivity",
                        "business"
                      ],
                      "tags": [
                        "saas",
                        "productivity",
                        "collaboration"
                      ],
                      "featured": true,
                      "icon_url": "https://example.com/icon.png",
                      "status": "approved",
                      "created_at": "2024-01-20T10:30:00.000Z",
                      "updated_at": "2024-01-20T14:45:00.000Z"
                    },
                    {
                      "id": "item_456def",
                      "name": "Great Design Tool",
                      "slug": "great-design-tool",
                      "description": "Professional design tool for creators",
                      "source_url": "https://example.com/design",
                      "category": [
                        "design",
                        "creative"
                      ],
                      "tags": [
                        "design",
                        "graphics",
                        "creative"
                      ],
                      "featured": false,
                      "icon_url": "https://example.com/design-icon.png",
                      "status": "pending",
                      "created_at": "2024-01-19T15:20:00.000Z",
                      "updated_at": "2024-01-19T15:20:00.000Z"
                    }
                  ],
                  "total": 156,
                  "page": 1,
                  "limit": 10,
                  "totalPages": 16
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "success": false,
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "success": false,
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch items"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Create new item",
        "description": "Creates a new item with comprehensive validation including duplicate checks for ID and slug. Supports all item properties including categories, tags, featured status, and initial status. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique item identifier",
                    "example": "item_123abc"
                  },
                  "name": {
                    "type": "string",
                    "description": "Item name",
                    "example": "Awesome Productivity Tool"
                  },
                  "slug": {
                    "type": "string",
                    "description": "URL-friendly slug (must be unique)",
                    "example": "awesome-productivity-tool"
                  },
                  "description": {
                    "type": "string",
                    "description": "Item description",
                    "example": "A powerful tool to boost your productivity"
                  },
                  "source_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Source URL of the item",
                    "example": "https://example.com/tool"
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Item categories",
                    "example": [
                      "productivity",
                      "business"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Item tags",
                    "example": [
                      "saas",
                      "productivity",
                      "collaboration"
                    ]
                  },
                  "featured": {
                    "type": "boolean",
                    "description": "Whether the item is featured",
                    "default": false,
                    "example": true
                  },
                  "icon_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to the item's icon",
                    "example": "https://example.com/icon.png"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "pending",
                      "approved",
                      "rejected"
                    ],
                    "description": "Initial item status",
                    "default": "draft",
                    "example": "draft"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "slug",
                  "description",
                  "source_url"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "item": {
                      "$ref": "#/components/schemas/Item"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Item created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "item",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "item": {
                    "id": "item_123abc",
                    "name": "Awesome Productivity Tool",
                    "slug": "awesome-productivity-tool",
                    "description": "A powerful tool to boost your productivity",
                    "source_url": "https://example.com/tool",
                    "category": [
                      "productivity",
                      "business"
                    ],
                    "tags": [
                      "saas",
                      "productivity",
                      "collaboration"
                    ],
                    "featured": true,
                    "icon_url": "https://example.com/icon.png",
                    "status": "draft",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  },
                  "message": "Item created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item ID, name, slug, description, and source URL are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Duplicate ID or slug",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "duplicate_id": "Item with ID 'item_123abc' already exists",
                        "duplicate_slug": "Item with slug 'awesome-tool' already exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create item"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/items/stats": {
      "get": {
        "tags": [
          "Admin - Items"
        ],
        "summary": "Get item statistics",
        "description": "Returns basic statistics about items including total count and counts by status (draft, pending, approved, rejected). Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Item statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of items",
                          "example": 1247
                        },
                        "draft": {
                          "type": "integer",
                          "description": "Number of draft items",
                          "example": 45
                        },
                        "pending": {
                          "type": "integer",
                          "description": "Number of pending items",
                          "example": 23
                        },
                        "approved": {
                          "type": "integer",
                          "description": "Number of approved items",
                          "example": 1156
                        },
                        "rejected": {
                          "type": "integer",
                          "description": "Number of rejected items",
                          "example": 23
                        }
                      },
                      "required": [
                        "total",
                        "draft",
                        "pending",
                        "approved",
                        "rejected"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "total": 1247,
                    "draft": 45,
                    "pending": 23,
                    "approved": 1156,
                    "rejected": 23
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch item stats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications/{id}/read": {
      "patch": {
        "tags": [
          "Admin - Notifications"
        ],
        "summary": "Mark specific notification as read",
        "description": "Marks a specific notification as read by its ID. Updates the isRead flag to true, sets readAt timestamp, and updates the updatedAt timestamp. Only the notification owner can mark their own notifications as read. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Notification ID to mark as read",
            "example": "notif_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "notification": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Notification ID",
                          "example": "notif_123abc"
                        },
                        "userId": {
                          "type": "string",
                          "description": "User ID who owns the notification",
                          "example": "user_456def"
                        },
                        "type": {
                          "type": "string",
                          "description": "Notification type",
                          "example": "item_approved"
                        },
                        "title": {
                          "type": "string",
                          "description": "Notification title",
                          "example": "Item Approved"
                        },
                        "message": {
                          "type": "string",
                          "description": "Notification message",
                          "example": "Your item 'Awesome Tool' has been approved and is now live."
                        },
                        "data": {
                          "type": "string",
                          "nullable": true,
                          "description": "Additional data as JSON string",
                          "example": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\"}"
                        },
                        "isRead": {
                          "type": "boolean",
                          "description": "Read status (will be true after this operation)",
                          "example": true
                        },
                        "readAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the notification was marked as read",
                          "example": "2024-01-20T16:45:00.000Z"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the notification was created",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the notification was last updated",
                          "example": "2024-01-20T16:45:00.000Z"
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "notification"
                  ]
                },
                "example": {
                  "success": true,
                  "notification": {
                    "id": "notif_123abc",
                    "userId": "user_456def",
                    "type": "item_approved",
                    "title": "Item Approved",
                    "message": "Your item 'Awesome Tool' has been approved and is now live.",
                    "data": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\"}",
                    "isRead": true,
                    "readAt": "2024-01-20T16:45:00.000Z",
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T16:45:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing notification ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Notification ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Notification not found or not owned by user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Notification not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications/mark-all-read": {
      "patch": {
        "tags": [
          "Admin - Notifications"
        ],
        "summary": "Mark all notifications as read",
        "description": "Marks all unread notifications for the authenticated user as read. Updates the isRead flag to true, sets readAt timestamp, and updates the updatedAt timestamp. Returns the count of notifications that were updated. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "updatedCount": {
                      "type": "integer",
                      "description": "Number of notifications that were marked as read",
                      "example": 5
                    }
                  },
                  "required": [
                    "success",
                    "updatedCount"
                  ]
                },
                "example": {
                  "success": true,
                  "updatedCount": 5
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications": {
      "get": {
        "tags": [
          "Admin - Notifications"
        ],
        "summary": "Get admin notifications",
        "description": "Retrieves the latest 50 notifications for the authenticated admin user, ordered by creation date (newest first). Also returns the count of unread notifications. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "notifications": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Notification ID",
                                "example": "notif_123abc"
                              },
                              "userId": {
                                "type": "string",
                                "description": "User ID who receives the notification",
                                "example": "user_456def"
                              },
                              "type": {
                                "type": "string",
                                "description": "Notification type",
                                "example": "item_approved"
                              },
                              "title": {
                                "type": "string",
                                "description": "Notification title",
                                "example": "Item Approved"
                              },
                              "message": {
                                "type": "string",
                                "description": "Notification message",
                                "example": "Your item 'Awesome Tool' has been approved and is now live."
                              },
                              "data": {
                                "type": "string",
                                "nullable": true,
                                "description": "Additional data as JSON string",
                                "example": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\"}"
                              },
                              "isRead": {
                                "type": "boolean",
                                "description": "Whether the notification has been read",
                                "example": false
                              },
                              "readAt": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "description": "When the notification was read",
                                "example": null
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "When the notification was created",
                                "example": "2024-01-20T10:30:00.000Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "description": "When the notification was last updated",
                                "example": "2024-01-20T10:30:00.000Z"
                              }
                            }
                          }
                        },
                        "unreadCount": {
                          "type": "integer",
                          "description": "Number of unread notifications",
                          "example": 3
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "notifications": [
                      {
                        "id": "notif_123abc",
                        "userId": "user_456def",
                        "type": "item_approved",
                        "title": "Item Approved",
                        "message": "Your item 'Awesome Tool' has been approved and is now live.",
                        "data": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\"}",
                        "isRead": false,
                        "readAt": null,
                        "createdAt": "2024-01-20T10:30:00.000Z",
                        "updatedAt": "2024-01-20T10:30:00.000Z"
                      },
                      {
                        "id": "notif_234bcd",
                        "userId": "user_456def",
                        "type": "comment_received",
                        "title": "New Comment",
                        "message": "Someone commented on your item 'Great App'.",
                        "data": "{\"itemId\": \"item_890jkl\", \"commentId\": \"comment_345efg\"}",
                        "isRead": true,
                        "readAt": "2024-01-19T16:45:00.000Z",
                        "createdAt": "2024-01-19T15:20:00.000Z",
                        "updatedAt": "2024-01-19T16:45:00.000Z"
                      }
                    ],
                    "unreadCount": 3
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Notifications"
        ],
        "summary": "Create new notification",
        "description": "Creates a new notification for a specific user. The notification will be delivered to the specified user and can include additional data as JSON. Requires authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Notification type identifier",
                    "example": "item_approved"
                  },
                  "title": {
                    "type": "string",
                    "description": "Notification title",
                    "example": "Item Approved"
                  },
                  "message": {
                    "type": "string",
                    "description": "Notification message content",
                    "example": "Your item 'Awesome Tool' has been approved and is now live."
                  },
                  "userId": {
                    "type": "string",
                    "description": "ID of the user who will receive the notification",
                    "example": "user_456def"
                  },
                  "data": {
                    "type": "object",
                    "description": "Optional additional data (will be JSON stringified)",
                    "example": {
                      "itemId": "item_789ghi",
                      "itemName": "Awesome Tool",
                      "action": "approved"
                    }
                  }
                },
                "required": [
                  "type",
                  "title",
                  "message",
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "notification": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Generated notification ID",
                          "example": "notif_123abc"
                        },
                        "userId": {
                          "type": "string",
                          "description": "User ID who receives the notification",
                          "example": "user_456def"
                        },
                        "type": {
                          "type": "string",
                          "description": "Notification type",
                          "example": "item_approved"
                        },
                        "title": {
                          "type": "string",
                          "description": "Notification title",
                          "example": "Item Approved"
                        },
                        "message": {
                          "type": "string",
                          "description": "Notification message",
                          "example": "Your item 'Awesome Tool' has been approved and is now live."
                        },
                        "data": {
                          "type": "string",
                          "nullable": true,
                          "description": "Additional data as JSON string",
                          "example": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\", \"action\": \"approved\"}"
                        },
                        "isRead": {
                          "type": "boolean",
                          "description": "Read status (always false for new notifications)",
                          "example": false
                        },
                        "readAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Read timestamp (null for new notifications)",
                          "example": null
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Last update timestamp",
                          "example": "2024-01-20T10:30:00.000Z"
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "notification"
                  ]
                },
                "example": {
                  "success": true,
                  "notification": {
                    "id": "notif_123abc",
                    "userId": "user_456def",
                    "type": "item_approved",
                    "title": "Item Approved",
                    "message": "Your item 'Awesome Tool' has been approved and is now live.",
                    "data": "{\"itemId\": \"item_789ghi\", \"itemName\": \"Awesome Tool\", \"action\": \"approved\"}",
                    "isRead": false,
                    "readAt": null,
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Missing required fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/roles/{id}": {
      "get": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Get role by ID",
        "description": "Retrieves a specific role by its ID with complete details including permissions, status, and metadata. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID",
            "example": "admin"
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "admin",
                    "name": "Administrator",
                    "description": "Full system administrator with all permissions",
                    "status": "active",
                    "isAdmin": true,
                    "permissions": [
                      "users.read",
                      "users.write",
                      "roles.read",
                      "roles.write",
                      "items.read",
                      "items.write"
                    ],
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Role not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch role"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Update role",
        "description": "Updates a specific role's properties including name, description, status, and admin privileges. All fields are optional and only provided fields will be updated. Includes comprehensive validation for name and description lengths. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID to update",
            "example": "moderator"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 100,
                    "description": "Role name",
                    "example": "Senior Moderator"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Role description",
                    "example": "Senior content moderator with enhanced permissions and team leadership responsibilities"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Role status",
                    "example": "active"
                  },
                  "isAdmin": {
                    "type": "boolean",
                    "description": "Whether this role has admin privileges",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Role updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "moderator",
                    "name": "Senior Moderator",
                    "description": "Senior content moderator with enhanced permissions and team leadership responsibilities",
                    "status": "active",
                    "isAdmin": false,
                    "permissions": [
                      "items.read",
                      "items.moderate",
                      "comments.moderate",
                      "users.moderate"
                    ],
                    "created_at": "2024-01-19T15:20:00.000Z",
                    "updated_at": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Role updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "empty_name": "Role name cannot be empty",
                        "invalid_name_length": "Role name must be between 3 and 100 characters",
                        "invalid_description_length": "Role description must be at most 500 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Role not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update role"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Delete role",
        "description": "Deletes a specific role from the system. Supports both soft delete (default - marks as inactive) and hard delete (permanent removal). Hard delete completely removes the role and all associated data. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Role ID to delete",
            "example": "old-role"
          },
          {
            "name": "hard",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "default": "false"
            },
            "description": "Whether to perform hard delete (permanent) or soft delete (mark inactive)",
            "example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message indicating deletion type",
                      "examples": {
                        "soft_delete": "Role deleted (marked as inactive)",
                        "hard_delete": "Role permanently deleted"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "examples": {
                  "soft_delete": {
                    "summary": "Soft delete response",
                    "value": {
                      "success": true,
                      "message": "Role deleted (marked as inactive)"
                    }
                  },
                  "hard_delete": {
                    "summary": "Hard delete response",
                    "value": {
                      "success": true,
                      "message": "Role permanently deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Role not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete role"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/roles/active": {
      "get": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Get active roles",
        "description": "Returns a list of all active roles in the system. This endpoint is typically used for role selection in user management interfaces, dropdowns, and assignment forms. Only returns roles with 'active' status.",
        "responses": {
          "200": {
            "description": "Active roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  },
                  "required": [
                    "roles"
                  ]
                },
                "example": {
                  "roles": [
                    {
                      "id": "admin",
                      "name": "Administrator",
                      "description": "Full system administrator with all permissions",
                      "status": "active",
                      "isAdmin": true,
                      "permissions": [
                        "users.read",
                        "users.write",
                        "roles.read",
                        "roles.write"
                      ],
                      "created_at": "2024-01-20T10:30:00.000Z",
                      "updated_at": "2024-01-20T10:30:00.000Z"
                    },
                    {
                      "id": "moderator",
                      "name": "Moderator",
                      "description": "Content moderator with limited admin permissions",
                      "status": "active",
                      "isAdmin": false,
                      "permissions": [
                        "items.read",
                        "items.moderate",
                        "comments.moderate"
                      ],
                      "created_at": "2024-01-19T15:20:00.000Z",
                      "updated_at": "2024-01-19T15:20:00.000Z"
                    },
                    {
                      "id": "user",
                      "name": "Regular User",
                      "description": "Standard user with basic permissions",
                      "status": "active",
                      "isAdmin": false,
                      "permissions": [
                        "items.read",
                        "comments.read",
                        "comments.write"
                      ],
                      "created_at": "2024-01-18T09:15:00.000Z",
                      "updated_at": "2024-01-18T09:15:00.000Z"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch active roles"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/roles": {
      "get": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Get paginated roles list",
        "description": "Returns a paginated list of roles with optional filtering by status and sorting capabilities. Supports comprehensive role management for admin users. Includes pagination metadata and flexible sorting options.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of roles per page",
            "example": 10
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by role status",
            "example": "active"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "id",
                "created_at"
              ],
              "default": "name"
            },
            "description": "Field to sort by",
            "example": "name"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order",
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Roles list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of roles",
                      "example": 25
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of roles per page",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total number of pages",
                      "example": 3
                    }
                  },
                  "required": [
                    "success",
                    "roles",
                    "total",
                    "page",
                    "limit",
                    "totalPages"
                  ]
                },
                "example": {
                  "success": true,
                  "roles": [
                    {
                      "id": "admin",
                      "name": "Administrator",
                      "description": "Full system administrator with all permissions",
                      "status": "active",
                      "isAdmin": true,
                      "permissions": [
                        "users.read",
                        "users.write",
                        "roles.read",
                        "roles.write"
                      ],
                      "created_at": "2024-01-20T10:30:00.000Z",
                      "updated_at": "2024-01-20T10:30:00.000Z"
                    },
                    {
                      "id": "moderator",
                      "name": "Moderator",
                      "description": "Content moderator with limited admin permissions",
                      "status": "active",
                      "isAdmin": false,
                      "permissions": [
                        "items.read",
                        "items.moderate",
                        "comments.moderate"
                      ],
                      "created_at": "2024-01-19T15:20:00.000Z",
                      "updated_at": "2024-01-19T15:20:00.000Z"
                    }
                  ],
                  "total": 25,
                  "page": 1,
                  "limit": 10,
                  "totalPages": 3
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "success": false,
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "success": false,
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch roles"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Create new role",
        "description": "Creates a new role with comprehensive validation including name normalization, duplicate checking, and automatic ID generation. The role ID is automatically generated from the name using normalization and sanitization. Supports admin flag and status configuration.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 100,
                    "description": "Role name (will be used to generate ID)",
                    "example": "Content Moderator"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Role description",
                    "example": "Responsible for moderating user-generated content and ensuring quality standards"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Role status",
                    "default": "active",
                    "example": "active"
                  },
                  "isAdmin": {
                    "type": "boolean",
                    "description": "Whether this role has admin privileges",
                    "default": false,
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Role"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Role created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "content-moderator",
                    "name": "Content Moderator",
                    "description": "Responsible for moderating user-generated content and ensuring quality standards",
                    "status": "active",
                    "isAdmin": false,
                    "permissions": [],
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  },
                  "message": "Role created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_fields": "Missing required fields: name, description",
                        "invalid_name_length": "Role name must be between 3 and 100 characters",
                        "invalid_description_length": "Role description must be at most 500 characters",
                        "invalid_id": "Unable to derive a valid role ID from name"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Role with similar name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Role with similar name already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create role"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/roles/stats": {
      "get": {
        "tags": [
          "Admin - Roles"
        ],
        "summary": "Get role statistics",
        "description": "Returns comprehensive statistics about roles including total count, active/inactive breakdown, and average permissions per role. Provides insights for admin dashboard and role management analytics. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Role statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of roles",
                          "example": 25
                        },
                        "active": {
                          "type": "integer",
                          "description": "Number of active roles",
                          "example": 20
                        },
                        "inactive": {
                          "type": "integer",
                          "description": "Number of inactive roles",
                          "example": 5
                        },
                        "averagePermissions": {
                          "type": "number",
                          "description": "Average number of permissions per role (rounded to 1 decimal)",
                          "example": 4.2
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "total": 25,
                    "active": 20,
                    "inactive": 5,
                    "averagePermissions": 4.2
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch role statistics"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tags/{id}": {
      "get": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Get tag by ID",
        "description": "Retrieves a specific tag by its ID with complete details including usage statistics and metadata. Used for tag editing and detailed view in admin interfaces. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag ID",
            "example": "productivity"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 156,
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch tag"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Update tag",
        "description": "Updates a specific tag's properties including name and active status. Used for tag management and maintenance. The tag ID cannot be changed after creation. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag ID to update",
            "example": "productivity"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated tag name",
                    "example": "Productivity & Efficiency"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Whether the tag is active and can be used",
                    "example": true
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tag"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Tag updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity & Efficiency",
                    "isActive": true,
                    "itemCount": 156,
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T16:45:00.000Z"
                  },
                  "message": "Tag updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_name": "Tag name is required",
                        "validation_error": "Tag name must be between 2 and 50 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Tag name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag with name 'Productivity & Efficiency' already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update tag"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Delete tag",
        "description": "Permanently deletes a specific tag from the system. This action will also remove the tag from all associated items. Use with caution as this operation cannot be undone. Consider deactivating the tag instead if you want to preserve data integrity. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag ID to delete",
            "example": "deprecated-tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Tag deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Tag deleted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete tag"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tags": {
      "get": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Get paginated tags list",
        "description": "Returns a paginated list of all tags in the system. Used for tag management in admin interfaces. Includes pagination metadata and supports flexible page sizing. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of tags per page",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Tags list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Tag"
                          }
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of tags",
                          "example": 45
                        },
                        "page": {
                          "type": "integer",
                          "description": "Current page number",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Number of tags per page",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages",
                          "example": 5
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "tags": [
                      {
                        "id": "productivity",
                        "name": "Productivity",
                        "isActive": true,
                        "itemCount": 156,
                        "created_at": "2024-01-20T10:30:00.000Z",
                        "updated_at": "2024-01-20T10:30:00.000Z"
                      },
                      {
                        "id": "design",
                        "name": "Design",
                        "isActive": true,
                        "itemCount": 89,
                        "created_at": "2024-01-19T15:20:00.000Z",
                        "updated_at": "2024-01-19T15:20:00.000Z"
                      },
                      {
                        "id": "development",
                        "name": "Development",
                        "isActive": false,
                        "itemCount": 234,
                        "created_at": "2024-01-18T09:15:00.000Z",
                        "updated_at": "2024-01-20T14:30:00.000Z"
                      }
                    ],
                    "total": 45,
                    "page": 1,
                    "limit": 10,
                    "totalPages": 5
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "success": false,
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "success": false,
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch tags"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Create new tag",
        "description": "Creates a new tag with specified ID and name. The tag can be set as active or inactive. Used for expanding the tag taxonomy and organizing content. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique tag identifier (URL-friendly slug)",
                    "example": "artificial-intelligence"
                  },
                  "name": {
                    "type": "string",
                    "description": "Human-readable tag name",
                    "example": "Artificial Intelligence"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Whether the tag is active and can be used",
                    "default": true,
                    "example": true
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "tag": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  },
                  "required": [
                    "success",
                    "tag"
                  ]
                },
                "example": {
                  "success": true,
                  "tag": {
                    "id": "artificial-intelligence",
                    "name": "Artificial Intelligence",
                    "isActive": true,
                    "itemCount": 0,
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_fields": "Tag ID and name are required",
                        "validation_error": "Tag name must be between 2 and 50 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Tag with same ID or name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag with ID 'artificial-intelligence' already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create tag"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{id}": {
      "get": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieves a specific user by their ID with complete profile information including role, status, and metadata. Used for user detail views and editing forms in admin interfaces. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "example": "user_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "user_123abc",
                    "username": "johndoe",
                    "email": "john.doe@example.com",
                    "name": "John Doe",
                    "title": "Senior Developer",
                    "avatar": "https://example.com/avatars/john.jpg",
                    "role": "admin",
                    "status": "active",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T14:45:00.000Z",
                    "last_login": "2024-01-20T16:20:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Update user",
        "description": "Updates a specific user's properties with comprehensive validation. All fields are optional and only provided fields will be updated. Includes email format validation, username format validation, role verification, and status validation. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID to update",
            "example": "user_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "Username",
                    "example": "johndoe_updated"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address",
                    "example": "john.updated@example.com"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100,
                    "description": "Full name",
                    "example": "John Updated Doe"
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Job title or position",
                    "example": "Lead Developer"
                  },
                  "avatar": {
                    "type": "string",
                    "maxLength": 500,
                    "format": "uri",
                    "description": "Avatar image URL",
                    "example": "https://example.com/avatars/john_new.jpg"
                  },
                  "role": {
                    "type": "string",
                    "description": "User role (must exist in system)",
                    "example": "moderator"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "User status",
                    "example": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "user_123abc",
                    "username": "johndoe_updated",
                    "email": "john.updated@example.com",
                    "name": "John Updated Doe",
                    "title": "Lead Developer",
                    "avatar": "https://example.com/avatars/john_new.jpg",
                    "role": "moderator",
                    "status": "active",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T16:45:00.000Z",
                    "last_login": "2024-01-20T16:20:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "invalid_email": "Invalid email format",
                        "invalid_username": "Username must be between 3 and 50 characters",
                        "invalid_name": "Name must be between 2 and 100 characters",
                        "invalid_role": "Invalid role",
                        "invalid_status": "Invalid status. Must be \"active\" or \"inactive\""
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Delete user",
        "description": "Permanently deletes a specific user from the system. This action cannot be undone and will remove all user data including profile, activity history, and associated content. Includes protection against self-deletion to prevent admin lockout. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID to delete",
            "example": "user_456def"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "User deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "User deleted successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Cannot delete own account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Cannot delete your own account"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/check-email": {
      "post": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Check email availability",
        "description": "Checks if an email address is available for use or already exists in the system. Supports excluding a specific user ID for update scenarios where a user keeps their current email. Used for real-time validation in user forms. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to check",
                    "example": "john.doe@example.com"
                  },
                  "excludeId": {
                    "type": "string",
                    "description": "User ID to exclude from the check (for updates)",
                    "example": "user_123abc"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email availability check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "Whether the email is available for use",
                      "example": false
                    },
                    "exists": {
                      "type": "boolean",
                      "description": "Whether the email already exists in the system",
                      "example": true
                    }
                  },
                  "required": [
                    "available",
                    "exists"
                  ]
                },
                "examples": {
                  "email_available": {
                    "summary": "Email is available",
                    "value": {
                      "available": true,
                      "exists": false
                    }
                  },
                  "email_taken": {
                    "summary": "Email is already taken",
                    "value": {
                      "available": false,
                      "exists": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Email is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Email is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/check-username": {
      "post": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Check username availability",
        "description": "Checks if a username is available for use or already exists in the system. Supports excluding a specific user ID for update scenarios where a user keeps their current username. Used for real-time validation in user forms and registration. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username to check",
                    "example": "johndoe"
                  },
                  "excludeId": {
                    "type": "string",
                    "description": "User ID to exclude from the check (for updates)",
                    "example": "user_123abc"
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username availability check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "boolean",
                      "description": "Whether the username is available for use",
                      "example": false
                    },
                    "exists": {
                      "type": "boolean",
                      "description": "Whether the username already exists in the system",
                      "example": true
                    }
                  },
                  "required": [
                    "available",
                    "exists"
                  ]
                },
                "examples": {
                  "username_available": {
                    "summary": "Username is available",
                    "value": {
                      "available": true,
                      "exists": false
                    }
                  },
                  "username_taken": {
                    "summary": "Username is already taken",
                    "value": {
                      "available": false,
                      "exists": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Username is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Username is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Get paginated users list",
        "description": "Returns a paginated list of users with advanced filtering, searching, and sorting capabilities. Supports comprehensive user management for admin interfaces including search by name/email/username, role filtering, status filtering, and flexible sorting options. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of users per page",
            "example": 10
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "description": "Search term for name, email, or username",
            "example": "john"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "description": "Filter by user role",
            "example": "admin"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by user status",
            "example": "active"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "username",
                "email",
                "role",
                "created_at"
              ],
              "default": "name"
            },
            "description": "Field to sort by",
            "example": "created_at"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order",
            "example": "desc"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include inactive users",
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Users list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of users",
                      "example": 156
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number",
                      "example": 1
                    },
                    "limit": {
                      "type": "integer",
                      "description": "Number of users per page",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total number of pages",
                      "example": 16
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "total",
                    "page",
                    "limit",
                    "totalPages"
                  ]
                },
                "example": {
                  "success": true,
                  "data": [
                    {
                      "id": "user_123abc",
                      "username": "johndoe",
                      "email": "john.doe@example.com",
                      "name": "John Doe",
                      "title": "Senior Developer",
                      "avatar": "https://example.com/avatars/john.jpg",
                      "role": "admin",
                      "status": "active",
                      "created_at": "2024-01-20T10:30:00.000Z",
                      "updated_at": "2024-01-20T14:45:00.000Z",
                      "last_login": "2024-01-20T16:20:00.000Z"
                    },
                    {
                      "id": "user_456def",
                      "username": "janesmith",
                      "email": "jane.smith@example.com",
                      "name": "Jane Smith",
                      "title": "Product Manager",
                      "avatar": "https://example.com/avatars/jane.jpg",
                      "role": "moderator",
                      "status": "active",
                      "created_at": "2024-01-19T15:20:00.000Z",
                      "updated_at": "2024-01-19T15:20:00.000Z",
                      "last_login": "2024-01-20T09:15:00.000Z"
                    }
                  ],
                  "total": 156,
                  "page": 1,
                  "limit": 10,
                  "totalPages": 16
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "invalid_page": "Invalid page parameter. Must be a positive integer.",
                        "invalid_limit": "Invalid limit parameter. Must be between 1 and 100.",
                        "invalid_status": "Invalid status parameter",
                        "invalid_sort": "Invalid sortBy parameter",
                        "search_too_long": "Search parameter too long"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Create new user",
        "description": "Creates a new user with comprehensive validation including email format, username format, password strength, and role verification. Supports optional fields like title and avatar. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]{3,30}$",
                    "description": "Unique username (3-30 chars, alphanumeric, dash, underscore)",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Valid email address",
                    "example": "john.doe@example.com"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100,
                    "description": "Full name",
                    "example": "John Doe"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "Password (minimum 8 characters)",
                    "example": "SecurePass123!"
                  },
                  "role": {
                    "type": "string",
                    "description": "User role (must exist in system)",
                    "example": "admin"
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Job title or position",
                    "example": "Senior Developer"
                  },
                  "avatar": {
                    "type": "string",
                    "maxLength": 500,
                    "format": "uri",
                    "description": "Avatar image URL",
                    "example": "https://example.com/avatars/john.jpg"
                  }
                },
                "required": [
                  "username",
                  "email",
                  "name",
                  "password",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "user_123abc",
                    "username": "johndoe",
                    "email": "john.doe@example.com",
                    "name": "John Doe",
                    "title": "Senior Developer",
                    "avatar": "https://example.com/avatars/john.jpg",
                    "role": "admin",
                    "status": "active",
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z",
                    "last_login": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_fields": "Missing required fields: username, email, name, password, and role are required",
                        "invalid_email": "Invalid email format",
                        "invalid_username": "Username must be 3-30 characters and contain only letters, numbers, dashes, and underscores",
                        "invalid_name": "Name must be between 2 and 100 characters",
                        "weak_password": "Password must be at least 8 characters long",
                        "invalid_role": "Invalid role",
                        "duplicate_email": "Email already exists",
                        "duplicate_username": "Username already exists"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/stats": {
      "get": {
        "tags": [
          "Admin - Users"
        ],
        "summary": "Get user statistics",
        "description": "Returns comprehensive statistics about users including total count, active/inactive breakdown, role distribution, recent registrations, and other metrics for admin dashboard and analytics. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalUsers": {
                          "type": "integer",
                          "description": "Total number of users",
                          "example": 1247
                        },
                        "activeUsers": {
                          "type": "integer",
                          "description": "Number of active users",
                          "example": 1156
                        },
                        "inactiveUsers": {
                          "type": "integer",
                          "description": "Number of inactive users",
                          "example": 91
                        },
                        "recentRegistrations": {
                          "type": "integer",
                          "description": "Users registered in the last 30 days",
                          "example": 67
                        },
                        "roleDistribution": {
                          "type": "object",
                          "description": "Users count by role",
                          "additionalProperties": {
                            "type": "integer"
                          },
                          "example": {
                            "admin": 5,
                            "moderator": 23,
                            "user": 1219
                          }
                        },
                        "averageLoginFrequency": {
                          "type": "number",
                          "description": "Average logins per user per month",
                          "example": 12.5
                        },
                        "topActiveUsers": {
                          "type": "array",
                          "description": "Most active users (by login frequency)",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "user_123abc"
                              },
                              "username": {
                                "type": "string",
                                "example": "johndoe"
                              },
                              "name": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "loginCount": {
                                "type": "integer",
                                "example": 45
                              },
                              "lastLogin": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2024-01-20T16:20:00.000Z"
                              }
                            }
                          },
                          "maxItems": 10
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "totalUsers": 1247,
                    "activeUsers": 1156,
                    "inactiveUsers": 91,
                    "recentRegistrations": 67,
                    "roleDistribution": {
                      "admin": 5,
                      "moderator": 23,
                      "user": 1219
                    },
                    "averageLoginFrequency": 12.5,
                    "topActiveUsers": [
                      {
                        "id": "user_123abc",
                        "username": "johndoe",
                        "name": "John Doe",
                        "loginCount": 45,
                        "lastLogin": "2024-01-20T16:20:00.000Z"
                      },
                      {
                        "id": "user_456def",
                        "username": "janesmith",
                        "name": "Jane Smith",
                        "loginCount": 38,
                        "lastLogin": "2024-01-20T15:30:00.000Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/{...nextauth}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "NextAuth.js GET handler",
        "description": "Handles NextAuth.js GET requests including session retrieval, provider configuration, CSRF token generation, and authentication callbacks. This endpoint is managed by NextAuth.js and supports various authentication flows including OAuth providers, email sign-in, and session management.",
        "parameters": [
          {
            "name": "nextauth",
            "in": "path",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "NextAuth.js dynamic route segments (e.g., ['signin'], ['session'], ['providers'], ['csrf'])",
            "examples": {
              "session": {
                "summary": "Get current session",
                "value": [
                  "session"
                ]
              },
              "providers": {
                "summary": "Get available providers",
                "value": [
                  "providers"
                ]
              },
              "csrf": {
                "summary": "Get CSRF token",
                "value": [
                  "csrf"
                ]
              },
              "signin": {
                "summary": "Sign-in page",
                "value": [
                  "signin"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (varies by endpoint)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Session response",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "user_123abc"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "image": {
                              "type": "string",
                              "example": "https://example.com/avatar.jpg"
                            },
                            "isAdmin": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "expires": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-02-20T10:30:00.000Z"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Providers response",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "signinUrl": {
                            "type": "string"
                          },
                          "callbackUrl": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "CSRF token response",
                      "properties": {
                        "csrfToken": {
                          "type": "string",
                          "example": "abc123def456"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "session_authenticated": {
                    "summary": "Authenticated session",
                    "value": {
                      "user": {
                        "id": "user_123abc",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "image": "https://example.com/avatar.jpg",
                        "isAdmin": false
                      },
                      "expires": "2024-02-20T10:30:00.000Z"
                    }
                  },
                  "session_unauthenticated": {
                    "summary": "Unauthenticated session",
                    "value": null
                  },
                  "providers": {
                    "summary": "Available providers",
                    "value": {
                      "google": {
                        "id": "google",
                        "name": "Google",
                        "type": "oauth",
                        "signinUrl": "/api/auth/signin/google",
                        "callbackUrl": "/api/auth/callback/google"
                      },
                      "github": {
                        "id": "github",
                        "name": "GitHub",
                        "type": "oauth",
                        "signinUrl": "/api/auth/signin/github",
                        "callbackUrl": "/api/auth/callback/github"
                      }
                    }
                  },
                  "csrf": {
                    "summary": "CSRF token",
                    "value": {
                      "csrfToken": "abc123def456ghi789"
                    }
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "HTML response for sign-in/sign-out pages"
                }
              }
            }
          },
          "302": {
            "description": "Redirect response for authentication flows"
          },
          "400": {
            "description": "Bad request - Invalid parameters or configuration"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "NextAuth.js POST handler",
        "description": "Handles NextAuth.js POST requests including sign-in, sign-out, callback processing, and session updates. Supports various authentication methods including OAuth providers, email/password, and magic links. Manages authentication state and session creation/destruction.",
        "parameters": [
          {
            "name": "nextauth",
            "in": "path",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "NextAuth.js dynamic route segments",
            "examples": {
              "signin": {
                "summary": "Sign-in request",
                "value": [
                  "signin",
                  "credentials"
                ]
              },
              "signout": {
                "summary": "Sign-out request",
                "value": [
                  "signout"
                ]
              },
              "callback": {
                "summary": "OAuth callback",
                "value": [
                  "callback",
                  "google"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Credentials sign-in",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User email",
                        "example": "john.doe@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password",
                        "example": "SecurePass123!"
                      },
                      "csrfToken": {
                        "type": "string",
                        "description": "CSRF protection token",
                        "example": "abc123def456"
                      }
                    },
                    "required": [
                      "email",
                      "password",
                      "csrfToken"
                    ]
                  },
                  {
                    "type": "object",
                    "description": "Email sign-in",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User email for magic link",
                        "example": "john.doe@example.com"
                      },
                      "csrfToken": {
                        "type": "string",
                        "description": "CSRF protection token",
                        "example": "abc123def456"
                      }
                    },
                    "required": [
                      "email",
                      "csrfToken"
                    ]
                  },
                  {
                    "type": "object",
                    "description": "Sign-out request",
                    "properties": {
                      "csrfToken": {
                        "type": "string",
                        "description": "CSRF protection token",
                        "example": "abc123def456"
                      }
                    },
                    "required": [
                      "csrfToken"
                    ]
                  }
                ]
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "csrfToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Successful sign-in",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Redirect URL after successful authentication",
                          "example": "/dashboard"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Email sent confirmation",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Redirect URL to check email page",
                          "example": "/auth/verify-request"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "successful_signin": {
                    "summary": "Successful credentials sign-in",
                    "value": {
                      "url": "/dashboard"
                    }
                  },
                  "email_sent": {
                    "summary": "Magic link email sent",
                    "value": {
                      "url": "/auth/verify-request"
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect response for successful authentication or OAuth flows"
          },
          "400": {
            "description": "Bad request - Invalid credentials or missing CSRF token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "invalid_credentials": "Invalid email or password",
                        "missing_csrf": "CSRF token missing",
                        "invalid_email": "Invalid email format"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication failed"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change user password",
        "description": "Changes the authenticated user's password with comprehensive security measures including current password verification, strong password validation, rate limiting, duplicate password prevention, and email confirmation. Includes protection against OAuth accounts and sends security notification emails.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "Current password for verification",
                    "example": "CurrentPass123!"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 8,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).{8,}$",
                    "description": "New password (min 8 chars, must contain uppercase, lowercase, number, and special character)",
                    "example": "NewSecurePass456@"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "description": "Confirmation of new password (must match newPassword)",
                    "example": "NewSecurePass456@"
                  }
                },
                "required": [
                  "currentPassword",
                  "newPassword",
                  "confirmPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Password changed successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Password changed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation errors or business logic violations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "validation_error": "Invalid input data",
                        "wrong_current": "Current password is incorrect",
                        "same_password": "New password must be different from current password",
                        "oauth_account": "Password change not available for OAuth accounts. Please contact support."
                      }
                    },
                    "details": {
                      "type": "array",
                      "description": "Detailed validation errors (when applicable)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "too_small"
                          },
                          "minimum": {
                            "type": "integer",
                            "example": 8
                          },
                          "type": {
                            "type": "string",
                            "example": "string"
                          },
                          "inclusive": {
                            "type": "boolean",
                            "example": true
                          },
                          "exact": {
                            "type": "boolean",
                            "example": false
                          },
                          "message": {
                            "type": "string",
                            "example": "Password must be at least 8 characters"
                          },
                          "path": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "newPassword"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "validation_error": {
                    "summary": "Password validation failed",
                    "value": {
                      "success": false,
                      "error": "Invalid input data",
                      "details": [
                        {
                          "code": "too_small",
                          "minimum": 8,
                          "type": "string",
                          "inclusive": true,
                          "exact": false,
                          "message": "Password must be at least 8 characters",
                          "path": [
                            "newPassword"
                          ]
                        }
                      ]
                    }
                  },
                  "wrong_current": {
                    "summary": "Current password incorrect",
                    "value": {
                      "success": false,
                      "error": "Current password is incorrect"
                    }
                  },
                  "same_password": {
                    "summary": "New password same as current",
                    "value": {
                      "success": false,
                      "error": "New password must be different from current password"
                    }
                  },
                  "oauth_account": {
                    "summary": "OAuth account restriction",
                    "value": {
                      "success": false,
                      "error": "Password change not available for OAuth accounts. Please contact support."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Please sign in."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Too many password change attempts. Please try again later."
                    },
                    "retryAfter": {
                      "type": "integer",
                      "description": "Seconds until next attempt is allowed",
                      "example": 900
                    }
                  }
                },
                "example": {
                  "success": false,
                  "error": "Too many password change attempts. Please try again later.",
                  "retryAfter": 900
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/current-user": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current authenticated user",
        "description": "Returns the current authenticated user's safe profile information including ID, name, email, avatar, provider, and admin status. Returns null if no user is authenticated. This endpoint provides sanitized user data without sensitive information like password hashes or internal metadata.",
        "responses": {
          "200": {
            "description": "Current user information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Authenticated user information",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "User unique identifier",
                          "example": "user_123abc"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "description": "User's full name",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "nullable": true,
                          "description": "User's email address",
                          "example": "john.doe@example.com"
                        },
                        "image": {
                          "type": "string",
                          "format": "uri",
                          "nullable": true,
                          "description": "User's profile image URL",
                          "example": "https://example.com/avatars/john.jpg"
                        },
                        "provider": {
                          "type": "string",
                          "nullable": true,
                          "description": "Authentication provider used",
                          "example": "google"
                        },
                        "isAdmin": {
                          "type": "boolean",
                          "description": "Whether the user has admin privileges",
                          "example": false
                        }
                      },
                      "required": [
                        "id",
                        "isAdmin"
                      ]
                    },
                    {
                      "type": "null",
                      "description": "No authenticated user"
                    }
                  ]
                },
                "examples": {
                  "authenticated_user": {
                    "summary": "Authenticated user",
                    "value": {
                      "id": "user_123abc",
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "image": "https://example.com/avatars/john.jpg",
                      "provider": "google",
                      "isAdmin": false
                    }
                  },
                  "authenticated_admin": {
                    "summary": "Authenticated admin user",
                    "value": {
                      "id": "user_456def",
                      "name": "Jane Admin",
                      "email": "jane.admin@example.com",
                      "image": "https://example.com/avatars/jane.jpg",
                      "provider": "credentials",
                      "isAdmin": true
                    }
                  },
                  "oauth_user": {
                    "summary": "OAuth user with minimal info",
                    "value": {
                      "id": "user_789ghi",
                      "name": "GitHub User",
                      "email": "github.user@example.com",
                      "image": "https://avatars.githubusercontent.com/u/123456",
                      "provider": "github",
                      "isAdmin": false
                    }
                  },
                  "credentials_user": {
                    "summary": "Credentials user",
                    "value": {
                      "id": "user_101jkl",
                      "name": "Local User",
                      "email": "local.user@example.com",
                      "image": null,
                      "provider": "credentials",
                      "isAdmin": false
                    }
                  },
                  "unauthenticated": {
                    "summary": "No authenticated user",
                    "value": null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/favorites/{itemSlug}": {
      "delete": {
        "tags": [
          "Favorites"
        ],
        "summary": "Remove item from favorites",
        "description": "Removes a specific item from the authenticated user's favorites list using the item slug. Includes existence checking to ensure the favorite belongs to the current user before deletion. Requires user authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemSlug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug identifier to remove from favorites",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from favorites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message",
                      "example": "Favorite removed successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Favorite removed successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Favorite not found or doesn't belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Favorite not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to remove favorite"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/favorites": {
      "get": {
        "tags": [
          "Favorites"
        ],
        "summary": "Get user favorites",
        "description": "Returns a list of all items favorited by the authenticated user, ordered by creation date (oldest first). Each favorite includes item metadata like name, icon, and category for display purposes. Requires user authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User favorites retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "favorites": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Favorite record ID",
                            "example": "fav_123abc"
                          },
                          "userId": {
                            "type": "string",
                            "description": "User ID who favorited the item",
                            "example": "user_456def"
                          },
                          "itemSlug": {
                            "type": "string",
                            "description": "Item slug identifier",
                            "example": "awesome-productivity-tool"
                          },
                          "itemName": {
                            "type": "string",
                            "description": "Item display name",
                            "example": "Awesome Productivity Tool"
                          },
                          "itemIconUrl": {
                            "type": "string",
                            "nullable": true,
                            "description": "Item icon URL",
                            "example": "https://example.com/icons/tool.png"
                          },
                          "itemCategory": {
                            "type": "string",
                            "nullable": true,
                            "description": "Item category",
                            "example": "productivity"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the item was favorited",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "When the favorite was last updated",
                            "example": "2024-01-20T10:30:00.000Z"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "favorites"
                  ]
                },
                "example": {
                  "success": true,
                  "favorites": [
                    {
                      "id": "fav_123abc",
                      "userId": "user_456def",
                      "itemSlug": "awesome-productivity-tool",
                      "itemName": "Awesome Productivity Tool",
                      "itemIconUrl": "https://example.com/icons/tool.png",
                      "itemCategory": "productivity",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z"
                    },
                    {
                      "id": "fav_789ghi",
                      "userId": "user_456def",
                      "itemSlug": "great-design-app",
                      "itemName": "Great Design App",
                      "itemIconUrl": "https://example.com/icons/design.png",
                      "itemCategory": "design",
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch favorites"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Favorites"
        ],
        "summary": "Add item to favorites",
        "description": "Adds an item to the authenticated user's favorites list. Includes duplicate checking to prevent adding the same item twice. Stores item metadata for quick access without needing to query the items table. Requires user authentication.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemSlug": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique item slug identifier",
                    "example": "awesome-productivity-tool"
                  },
                  "itemName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Item display name",
                    "example": "Awesome Productivity Tool"
                  },
                  "itemIconUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "Optional item icon URL",
                    "example": "https://example.com/icons/tool.png"
                  },
                  "itemCategory": {
                    "type": "string",
                    "description": "Optional item category",
                    "example": "productivity"
                  }
                },
                "required": [
                  "itemSlug",
                  "itemName"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to favorites successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "favorite": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Generated favorite record ID",
                          "example": "fav_123abc"
                        },
                        "userId": {
                          "type": "string",
                          "description": "User ID who favorited the item",
                          "example": "user_456def"
                        },
                        "itemSlug": {
                          "type": "string",
                          "description": "Item slug identifier",
                          "example": "awesome-productivity-tool"
                        },
                        "itemName": {
                          "type": "string",
                          "description": "Item display name",
                          "example": "Awesome Productivity Tool"
                        },
                        "itemIconUrl": {
                          "type": "string",
                          "nullable": true,
                          "description": "Item icon URL",
                          "example": "https://example.com/icons/tool.png"
                        },
                        "itemCategory": {
                          "type": "string",
                          "nullable": true,
                          "description": "Item category",
                          "example": "productivity"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the item was favorited",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "When the favorite was last updated",
                          "example": "2024-01-20T10:30:00.000Z"
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "favorite"
                  ]
                },
                "example": {
                  "success": true,
                  "favorite": {
                    "id": "fav_123abc",
                    "userId": "user_456def",
                    "itemSlug": "awesome-productivity-tool",
                    "itemName": "Awesome Productivity Tool",
                    "itemIconUrl": "https://example.com/icons/tool.png",
                    "itemCategory": "productivity",
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "details": {
                      "type": "string",
                      "description": "Detailed validation error message",
                      "example": "itemSlug is required and must be a non-empty string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Item already in favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Item is already in favorites"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to add favorite"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/featured-items": {
      "get": {
        "tags": [
          "Featured Items"
        ],
        "summary": "Get featured items for public display",
        "description": "Returns a list of active featured items for public display on the website. Automatically filters out inactive items and optionally excludes expired items based on their featured_until date. Items are sorted by featured order and date for optimal presentation. This is a public endpoint that doesn't require authentication.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 6
            },
            "description": "Maximum number of featured items to return",
            "example": 6
          },
          {
            "name": "includeExpired",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to include items past their featured_until date",
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "Featured items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Featured item ID",
                            "example": "featured_123abc"
                          },
                          "itemSlug": {
                            "type": "string",
                            "description": "Item slug identifier",
                            "example": "awesome-productivity-tool"
                          },
                          "itemName": {
                            "type": "string",
                            "description": "Item display name",
                            "example": "Awesome Productivity Tool"
                          },
                          "itemDescription": {
                            "type": "string",
                            "nullable": true,
                            "description": "Item description for featured display",
                            "example": "Boost your productivity with this amazing tool"
                          },
                          "itemIconUrl": {
                            "type": "string",
                            "nullable": true,
                            "description": "Item icon URL",
                            "example": "https://example.com/icons/tool.png"
                          },
                          "itemImageUrl": {
                            "type": "string",
                            "nullable": true,
                            "description": "Featured image URL",
                            "example": "https://example.com/featured/tool-banner.jpg"
                          },
                          "featuredOrder": {
                            "type": "integer",
                            "description": "Display order (higher = more prominent)",
                            "example": 10
                          },
                          "isActive": {
                            "type": "boolean",
                            "description": "Whether the item is currently featured",
                            "example": true
                          },
                          "featuredAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the item was featured",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "featuredUntil": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "When the featured status expires (null = no expiration)",
                            "example": "2024-02-20T10:30:00.000Z"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the featured item record was created",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "When the featured item was last updated",
                            "example": "2024-01-20T10:30:00.000Z"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of featured items returned",
                      "example": 3
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "count"
                  ]
                },
                "example": {
                  "success": true,
                  "data": [
                    {
                      "id": "featured_123abc",
                      "itemSlug": "awesome-productivity-tool",
                      "itemName": "Awesome Productivity Tool",
                      "itemDescription": "Boost your productivity with this amazing tool",
                      "itemIconUrl": "https://example.com/icons/tool.png",
                      "itemImageUrl": "https://example.com/featured/tool-banner.jpg",
                      "featuredOrder": 10,
                      "isActive": true,
                      "featuredAt": "2024-01-20T10:30:00.000Z",
                      "featuredUntil": "2024-02-20T10:30:00.000Z",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z"
                    },
                    {
                      "id": "featured_456def",
                      "itemSlug": "great-design-app",
                      "itemName": "Great Design App",
                      "itemDescription": "Create stunning designs effortlessly",
                      "itemIconUrl": "https://example.com/icons/design.png",
                      "itemImageUrl": "https://example.com/featured/design-banner.jpg",
                      "featuredOrder": 8,
                      "isActive": true,
                      "featuredAt": "2024-01-19T15:20:00.000Z",
                      "featuredUntil": null,
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z"
                    },
                    {
                      "id": "featured_789ghi",
                      "itemSlug": "useful-utility",
                      "itemName": "Useful Utility",
                      "itemDescription": "A handy utility for everyday tasks",
                      "itemIconUrl": "https://example.com/icons/utility.png",
                      "itemImageUrl": null,
                      "featuredOrder": 5,
                      "isActive": true,
                      "featuredAt": "2024-01-18T09:15:00.000Z",
                      "featuredUntil": "2024-03-18T09:15:00.000Z",
                      "createdAt": "2024-01-18T09:15:00.000Z",
                      "updatedAt": "2024-01-18T09:15:00.000Z"
                    }
                  ],
                  "count": 3
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch featured items"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Delete comment",
        "description": "Deletes a specific comment. Only the comment author can delete their own comment. The comment is soft-deleted (marked as deleted) rather than permanently removed from the database. Requires user authentication and ownership verification.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID that the comment belongs to",
            "example": "item_123abc"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comment ID to delete",
            "example": "comment_456def"
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted successfully (no content returned)"
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found, client profile not found, or not authorized to delete",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "examples": {
                    "client_not_found": "Client profile not found",
                    "comment_not_found": "Comment not found or not authorized"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/comments/rating": {
      "get": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Get item rating statistics",
        "description": "Returns aggregated rating statistics for a specific item including average rating and total number of ratings. Only counts non-deleted comments. This is a public endpoint that doesn't require authentication and includes database availability checking.",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to get rating statistics for",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Rating statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageRating": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 5,
                      "description": "Average rating (0 if no ratings)",
                      "example": 4.2
                    },
                    "totalRatings": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of ratings",
                      "example": 15
                    }
                  },
                  "required": [
                    "averageRating",
                    "totalRatings"
                  ]
                },
                "examples": {
                  "with_ratings": {
                    "summary": "Item with ratings",
                    "value": {
                      "averageRating": 4.2,
                      "totalRatings": 15
                    }
                  },
                  "no_ratings": {
                    "summary": "Item with no ratings",
                    "value": {
                      "averageRating": 0,
                      "totalRatings": 0
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch ratings"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/comments": {
      "get": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Get item comments",
        "description": "Returns all comments for a specific item including user information, ratings, and timestamps. Comments are returned with associated user profiles for display purposes. This is a public endpoint that doesn't require authentication.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to get comments for",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Comment ID",
                            "example": "comment_123abc"
                          },
                          "content": {
                            "type": "string",
                            "description": "Comment content",
                            "example": "This is an amazing tool! Really helped boost my productivity."
                          },
                          "rating": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 5,
                            "description": "User rating for the item",
                            "example": 5
                          },
                          "userId": {
                            "type": "string",
                            "description": "ID of the user who wrote the comment",
                            "example": "client_456def"
                          },
                          "itemId": {
                            "type": "string",
                            "description": "ID of the item being commented on",
                            "example": "item_123abc"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the comment was created",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "When the comment was last updated",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "deletedAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "When the comment was deleted (null if not deleted)",
                            "example": null
                          },
                          "user": {
                            "type": "object",
                            "description": "User profile information",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "client_456def"
                              },
                              "name": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "email": {
                                "type": "string",
                                "example": "john.doe@example.com"
                              },
                              "avatar": {
                                "type": "string",
                                "nullable": true,
                                "example": "https://example.com/avatars/john.jpg"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "comments"
                  ]
                },
                "example": {
                  "success": true,
                  "comments": [
                    {
                      "id": "comment_123abc",
                      "content": "This is an amazing tool! Really helped boost my productivity.",
                      "rating": 5,
                      "userId": "client_456def",
                      "itemId": "item_123abc",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z",
                      "deletedAt": null,
                      "user": {
                        "id": "client_456def",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "avatar": "https://example.com/avatars/john.jpg"
                      }
                    },
                    {
                      "id": "comment_789ghi",
                      "content": "Good tool, but could use some improvements in the UI.",
                      "rating": 4,
                      "userId": "client_789ghi",
                      "itemId": "item_123abc",
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z",
                      "deletedAt": null,
                      "user": {
                        "id": "client_789ghi",
                        "name": "Jane Smith",
                        "email": "jane.smith@example.com",
                        "avatar": null
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch comments"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Create item comment",
        "description": "Creates a new comment for a specific item with a rating. Requires user authentication and a valid client profile. The comment content is required and the rating must be between 1 and 5. Returns the created comment with user information.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to comment on",
            "example": "awesome-productivity-tool"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Comment content (required, non-empty)",
                    "example": "This is an amazing tool! Really helped boost my productivity."
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating for the item (1-5 stars)",
                    "example": 5
                  }
                },
                "required": [
                  "content",
                  "rating"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "comment": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Generated comment ID",
                          "example": "comment_123abc"
                        },
                        "content": {
                          "type": "string",
                          "description": "Comment content",
                          "example": "This is an amazing tool! Really helped boost my productivity."
                        },
                        "rating": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 5,
                          "description": "User rating for the item",
                          "example": 5
                        },
                        "userId": {
                          "type": "string",
                          "description": "ID of the user who wrote the comment",
                          "example": "client_456def"
                        },
                        "itemId": {
                          "type": "string",
                          "description": "ID of the item being commented on",
                          "example": "item_123abc"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the comment was created",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "When the comment was last updated",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "deletedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "When the comment was deleted (null if not deleted)",
                          "example": null
                        },
                        "user": {
                          "type": "object",
                          "description": "User profile information",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "client_456def"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "example": "john.doe@example.com"
                            },
                            "avatar": {
                              "type": "string",
                              "nullable": true,
                              "example": "https://example.com/avatars/john.jpg"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "comment"
                  ]
                },
                "example": {
                  "success": true,
                  "comment": {
                    "id": "comment_123abc",
                    "content": "This is an amazing tool! Really helped boost my productivity.",
                    "rating": 5,
                    "userId": "client_456def",
                    "itemId": "item_123abc",
                    "createdAt": "2024-01-20T10:30:00.000Z",
                    "updatedAt": "2024-01-20T10:30:00.000Z",
                    "deletedAt": null,
                    "user": {
                      "id": "client_456def",
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "avatar": "https://example.com/avatars/john.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "empty_content": "Content is required",
                        "invalid_rating": "Rating must be between 1 and 5"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create comment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/votes/count": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get item vote count",
        "description": "Returns the total vote count for a specific item. The count represents the net score (upvotes - downvotes). This is a public endpoint that doesn't require authentication and is optimized for quick vote count retrieval.",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to get vote count for",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Net vote count (upvotes - downvotes)",
                      "example": 15
                    }
                  },
                  "required": [
                    "success",
                    "count"
                  ]
                },
                "examples": {
                  "positive_score": {
                    "summary": "Item with positive score",
                    "value": {
                      "success": true,
                      "count": 15
                    }
                  },
                  "negative_score": {
                    "summary": "Item with negative score",
                    "value": {
                      "success": true,
                      "count": -3
                    }
                  },
                  "zero_score": {
                    "summary": "Item with no votes or equal votes",
                    "value": {
                      "success": true,
                      "count": 0
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch vote count"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/votes": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get item vote information",
        "description": "Returns the total vote count for an item and the current user's vote status if authenticated. The vote count represents the net score (upvotes - downvotes). User vote status shows whether the user has upvoted, downvoted, or not voted on the item.",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to get vote information for",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Net vote count (upvotes - downvotes)",
                      "example": 15
                    },
                    "userVote": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "up",
                        "down",
                        null
                      ],
                      "description": "Current user's vote status (null if not authenticated or no vote)",
                      "example": "up"
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "examples": {
                  "authenticated_upvoted": {
                    "summary": "Authenticated user who upvoted",
                    "value": {
                      "success": true,
                      "count": 15,
                      "userVote": "up"
                    }
                  },
                  "authenticated_downvoted": {
                    "summary": "Authenticated user who downvoted",
                    "value": {
                      "success": true,
                      "count": -3,
                      "userVote": "down"
                    }
                  },
                  "authenticated_no_vote": {
                    "summary": "Authenticated user with no vote",
                    "value": {
                      "success": true,
                      "count": 0,
                      "userVote": null
                    }
                  },
                  "unauthenticated": {
                    "summary": "Unauthenticated user",
                    "value": {
                      "success": true,
                      "count": 20,
                      "userVote": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Cast or update vote",
        "description": "Casts a new vote or updates an existing vote for an item. If the user has already voted, the previous vote is replaced with the new one. Supports upvote ('up') and downvote ('down') types. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to vote on",
            "example": "item_123abc"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "up",
                      "down"
                    ],
                    "description": "Vote type - 'up' for upvote, 'down' for downvote",
                    "example": "up"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote cast successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Updated net vote count (upvotes - downvotes)",
                      "example": 16
                    },
                    "userVote": {
                      "type": "string",
                      "enum": [
                        "up",
                        "down"
                      ],
                      "description": "User's current vote status",
                      "example": "up"
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "examples": {
                  "upvote_cast": {
                    "summary": "Upvote cast successfully",
                    "value": {
                      "success": true,
                      "count": 16,
                      "userVote": "up"
                    }
                  },
                  "downvote_cast": {
                    "summary": "Downvote cast successfully",
                    "value": {
                      "success": true,
                      "count": 14,
                      "userVote": "down"
                    }
                  },
                  "vote_updated": {
                    "summary": "Previous vote updated",
                    "value": {
                      "success": true,
                      "count": 18,
                      "userVote": "up"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid vote type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid vote type. Must be 'up' or 'down'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Remove user vote",
        "description": "Removes the current user's vote from an item if one exists. This effectively 'unvotes' the item, returning the user to a neutral state. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to remove vote from",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Updated net vote count after removal",
                      "example": 14
                    },
                    "userVote": {
                      "type": null,
                      "description": "User vote status (always null after removal)",
                      "example": null
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "example": {
                  "success": true,
                  "count": 14,
                  "userVote": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{itemId}/votes/status": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get user vote status",
        "description": "Returns the current authenticated user's vote status for a specific item. Returns the complete vote record if the user has voted, or null if no vote exists. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item ID to get vote status for",
            "example": "item_123abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "User has voted",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Vote record ID",
                          "example": "vote_123abc"
                        },
                        "userId": {
                          "type": "string",
                          "description": "User ID who cast the vote",
                          "example": "client_456def"
                        },
                        "itemId": {
                          "type": "string",
                          "description": "Item ID that was voted on",
                          "example": "item_123abc"
                        },
                        "voteType": {
                          "type": "string",
                          "enum": [
                            "UPVOTE",
                            "DOWNVOTE"
                          ],
                          "description": "Type of vote cast",
                          "example": "UPVOTE"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the vote was cast",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "When the vote was last updated",
                          "example": "2024-01-20T10:30:00.000Z"
                        }
                      }
                    },
                    {
                      "type": "null",
                      "description": "User has not voted"
                    }
                  ]
                },
                "examples": {
                  "upvote_status": {
                    "summary": "User has upvoted",
                    "value": {
                      "id": "vote_123abc",
                      "userId": "client_456def",
                      "itemId": "item_123abc",
                      "voteType": "UPVOTE",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "downvote_status": {
                    "summary": "User has downvoted",
                    "value": {
                      "id": "vote_789ghi",
                      "userId": "client_456def",
                      "itemId": "item_123abc",
                      "voteType": "DOWNVOTE",
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z"
                    }
                  },
                  "no_vote": {
                    "summary": "User has not voted",
                    "value": null
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch vote status"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/cancel": {
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Cancel subscription",
        "description": "Cancels a LemonSqueezy subscription for the authenticated user. Supports immediate cancellation or cancellation at the end of the current billing period. Requires user authentication and valid subscription ID.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "LemonSqueezy subscription ID to cancel",
                    "example": "sub_123abc456def"
                  },
                  "cancelAtPeriodEnd": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to cancel at the end of current period (true) or immediately (false)",
                    "example": true
                  }
                },
                "required": [
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription data from LemonSqueezy",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_123abc456def"
                        },
                        "status": {
                          "type": "string",
                          "example": "cancelled"
                        },
                        "cancelAtPeriodEnd": {
                          "type": "boolean",
                          "example": true
                        },
                        "endsAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-02-20T10:30:00.000Z"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "period_end": "Subscription will be cancelled at the end of the current period",
                        "immediate": "Subscription cancelled immediately"
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message",
                    "timestamp"
                  ]
                },
                "examples": {
                  "cancel_at_period_end": {
                    "summary": "Cancel at period end",
                    "value": {
                      "success": true,
                      "data": {
                        "id": "sub_123abc456def",
                        "status": "active",
                        "cancelAtPeriodEnd": true,
                        "endsAt": "2024-02-20T10:30:00.000Z"
                      },
                      "message": "Subscription will be cancelled at the end of the current period",
                      "timestamp": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "cancel_immediately": {
                    "summary": "Cancel immediately",
                    "value": {
                      "success": true,
                      "data": {
                        "id": "sub_123abc456def",
                        "status": "cancelled",
                        "cancelAtPeriodEnd": false,
                        "endsAt": "2024-01-20T10:30:00.000Z"
                      },
                      "message": "Subscription cancelled immediately",
                      "timestamp": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "code": "too_small",
                          "path": [
                            "subscriptionId"
                          ],
                          "message": "String must contain at least 1 character(s)"
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "example": "VALIDATION_ERROR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    },
                    "code": {
                      "type": "string",
                      "example": "AUTH_REQUIRED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to cancel subscription"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown error occurred"
                    },
                    "code": {
                      "type": "string",
                      "example": "CANCEL_FAILED"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/checkout": {
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Create checkout session",
        "description": "Creates a new LemonSqueezy checkout session for the authenticated user. Validates the request data, creates a custom checkout with user metadata, and returns the checkout URL. Requires user authentication and handles various error scenarios including configuration and validation errors.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variantId": {
                    "type": "string",
                    "description": "LemonSqueezy product variant ID",
                    "example": "123456"
                  },
                  "customPrice": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Custom price in cents (optional)",
                    "example": 2999
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the checkout",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "plan": "pro",
                      "source": "website"
                    }
                  }
                },
                "required": [
                  "variantId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "checkoutUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "LemonSqueezy checkout URL",
                          "example": "https://checkout.lemonsqueezy.com/checkout/custom/abc123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "User email",
                          "example": "user@example.com"
                        },
                        "customPrice": {
                          "type": "number",
                          "description": "Custom price in cents",
                          "example": 2999
                        },
                        "variantId": {
                          "type": "string",
                          "description": "Product variant ID",
                          "example": "123456"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Checkout metadata including user info",
                          "properties": {
                            "userId": {
                              "type": "string",
                              "example": "user_123abc"
                            },
                            "email": {
                              "type": "string",
                              "example": "user@example.com"
                            },
                            "name": {
                              "type": "string",
                              "example": "John Doe"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Checkout session created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "checkoutUrl": "https://checkout.lemonsqueezy.com/checkout/custom/abc123",
                    "email": "user@example.com",
                    "customPrice": 2999,
                    "variantId": "123456",
                    "metadata": {
                      "userId": "user_123abc",
                      "email": "user@example.com",
                      "name": "John Doe",
                      "plan": "pro",
                      "source": "website"
                    }
                  },
                  "message": "Checkout session created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "VALIDATION_ERROR"
                      ],
                      "example": "VALIDATION_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "invalid_json": "Invalid JSON in request body",
                        "validation_failed": "variantId is required",
                        "invalid_price": "Custom price must be a positive number"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR",
                        "CONFIGURATION_ERROR"
                      ],
                      "example": "INTERNAL_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "unauthorized": "Unauthorized",
                        "config_error": "Checkout service unavailable",
                        "internal_error": "Failed to create checkout session"
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - LemonSqueezy service error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "PAYMENT_SERVICE_ERROR"
                      ],
                      "example": "PAYMENT_SERVICE_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unable to create checkout session"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Create checkout session via query parameters",
        "description": "Creates a new LemonSqueezy checkout session using query parameters instead of request body. Useful for direct links and simple integrations. Validates query parameters and creates a custom checkout session.",
        "parameters": [
          {
            "name": "variantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "LemonSqueezy product variant ID",
            "example": "123456"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Customer email address",
            "example": "user@example.com"
          },
          {
            "name": "customPrice",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0
            },
            "description": "Custom price in cents",
            "example": 2999
          },
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "JSON string of additional metadata",
            "example": "{\"plan\":\"pro\",\"source\":\"website\"}"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "checkoutUrl": {
                          "type": "string",
                          "format": "uri",
                          "description": "LemonSqueezy checkout URL",
                          "example": "https://checkout.lemonsqueezy.com/checkout/custom/abc123"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Customer email",
                          "example": "user@example.com"
                        },
                        "customPrice": {
                          "type": "number",
                          "description": "Custom price in cents",
                          "example": 2999
                        },
                        "variantId": {
                          "type": "string",
                          "description": "Product variant ID",
                          "example": "123456"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Checkout metadata",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Checkout session created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "VALIDATION_ERROR"
                      ],
                      "example": "VALIDATION_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "example": "variantId is required, email must be valid"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR",
                        "CONFIGURATION_ERROR"
                      ],
                      "example": "INTERNAL_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to create checkout session"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - LemonSqueezy service error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "PAYMENT_SERVICE_ERROR"
                      ],
                      "example": "PAYMENT_SERVICE_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unable to create checkout session"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/list": {
      "get": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "List user checkouts",
        "description": "Returns a paginated list of LemonSqueezy checkouts for the authenticated user. Supports filtering by status, date range, and other parameters. Includes comprehensive pagination metadata and request tracking. Users can only view their own checkouts unless they have admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "completed",
                "failed",
                "cancelled",
                "expired"
              ]
            },
            "description": "Filter by checkout status",
            "example": "completed"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of checkouts per page",
            "example": 20
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number",
            "example": 1
          },
          {
            "name": "customerEmail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Filter by customer email (admin only for other users)",
            "example": "user@example.com"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter checkouts from this date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          {
            "name": "dateTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter checkouts until this date",
            "example": "2024-12-31T23:59:59.999Z"
          },
          {
            "name": "storeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by LemonSqueezy store ID",
            "example": "12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkouts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Checkout ID",
                            "example": "checkout_123abc"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "completed",
                              "failed",
                              "cancelled",
                              "expired"
                            ],
                            "example": "completed"
                          },
                          "customerEmail": {
                            "type": "string",
                            "format": "email",
                            "example": "user@example.com"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Amount in cents",
                            "example": 2999
                          },
                          "currency": {
                            "type": "string",
                            "example": "USD"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-20T10:30:00.000Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-20T10:35:00.000Z"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of checkouts",
                          "example": 150
                        },
                        "page": {
                          "type": "integer",
                          "description": "Current page number",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Items per page",
                          "example": 20
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Whether there are more pages",
                          "example": true
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages",
                          "example": 8
                        },
                        "currentPage": {
                          "type": "integer",
                          "description": "Current page number",
                          "example": 1
                        }
                      }
                    },
                    "filters": {
                      "type": "object",
                      "description": "Applied filters summary",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "completed"
                        },
                        "customerEmail": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "dateRange": {
                          "type": "string",
                          "example": "2024-01-01T00:00:00.000Z to 2024-12-31T23:59:59.999Z"
                        },
                        "appliedFilters": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "status",
                            "customerEmail",
                            "dateFrom",
                            "dateTo"
                          ]
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Request metadata",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "requestId": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "userId": {
                          "type": "string",
                          "example": "user_123abc"
                        },
                        "userEmail": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "environment": {
                          "type": "string",
                          "example": "production"
                        },
                        "version": {
                          "type": "string",
                          "example": "1.0.0"
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "pagination",
                    "filters",
                    "metadata"
                  ]
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Cache control header",
                "schema": {
                  "type": "string",
                  "example": "private, max-age=300"
                }
              },
              "X-Request-ID": {
                "description": "Request tracking ID",
                "schema": {
                  "type": "string",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid query parameters"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "code": "invalid_type",
                          "path": [
                            "limit"
                          ],
                          "message": "Expected number, received string"
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "example": "VALIDATION_ERROR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    },
                    "code": {
                      "type": "string",
                      "example": "AUTH_REQUIRED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch LemonSqueezy checkouts"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "AUTH_ERROR",
                        "SERVICE_UNAVAILABLE",
                        "INTERNAL_ERROR"
                      ],
                      "example": "INTERNAL_ERROR"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - LemonSqueezy service error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch LemonSqueezy checkouts"
                    },
                    "code": {
                      "type": "string",
                      "example": "SERVICE_UNAVAILABLE"
                    }
                  }
                }
              }
            },
            "headers": {
              "Retry-After": {
                "description": "Seconds to wait before retrying",
                "schema": {
                  "type": "string",
                  "example": "30"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "List checkouts with advanced filtering",
        "description": "Returns a paginated list of LemonSqueezy checkouts using POST method for complex filtering. Supports the same parameters as GET but via request body. Includes admin access control for viewing other users' checkouts.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "completed",
                      "failed",
                      "cancelled",
                      "expired"
                    ],
                    "description": "Filter by checkout status",
                    "example": "completed"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 50,
                    "description": "Number of checkouts per page",
                    "example": 20
                  },
                  "page": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1,
                    "description": "Page number",
                    "example": 1
                  },
                  "customerEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Filter by customer email (admin only for other users)",
                    "example": "user@example.com"
                  },
                  "dateFrom": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Filter checkouts from this date",
                    "example": "2024-01-01T00:00:00.000Z"
                  },
                  "dateTo": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Filter checkouts until this date",
                    "example": "2024-12-31T23:59:59.999Z"
                  },
                  "storeId": {
                    "type": "string",
                    "description": "Filter by LemonSqueezy store ID",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkouts retrieved successfully (same structure as GET)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request body or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "invalid_body": "Invalid request body",
                        "validation_error": "Invalid request parameters"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Request body must be a valid JSON object"
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_BODY",
                        "VALIDATION_ERROR"
                      ],
                      "example": "INVALID_BODY"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    },
                    "code": {
                      "type": "string",
                      "example": "AUTH_REQUIRED"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot access other users' checkouts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only view your own checkouts"
                    },
                    "code": {
                      "type": "string",
                      "example": "ACCESS_DENIED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch LemonSqueezy checkouts"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "code": {
                      "type": "string",
                      "example": "INTERNAL_ERROR"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/reactivate": {
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Reactivate subscription",
        "description": "Reactivates a previously cancelled LemonSqueezy subscription for the authenticated user. Sets cancelAtPeriodEnd to false and adds reactivation metadata. Requires user authentication and valid subscription ID.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "LemonSqueezy subscription ID to reactivate",
                    "example": "sub_123abc456def"
                  }
                },
                "required": [
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription reactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription data from LemonSqueezy",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_123abc456def"
                        },
                        "status": {
                          "type": "string",
                          "example": "active"
                        },
                        "cancelAtPeriodEnd": {
                          "type": "boolean",
                          "example": false
                        },
                        "endsAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "example": null
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "action": {
                              "type": "string",
                              "example": "reactivate"
                            },
                            "reactivateAction": {
                              "type": "boolean",
                              "example": true
                            },
                            "reactivatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-01-20T10:30:00.000Z"
                            },
                            "reactivatedBy": {
                              "type": "string",
                              "format": "email",
                              "example": "user@example.com"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription reactivated successfully"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message",
                    "timestamp"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "sub_123abc456def",
                    "status": "active",
                    "cancelAtPeriodEnd": false,
                    "endsAt": null,
                    "metadata": {
                      "action": "reactivate",
                      "reactivateAction": true,
                      "reactivatedAt": "2024-01-20T10:30:00.000Z",
                      "reactivatedBy": "user@example.com"
                    }
                  },
                  "message": "Subscription reactivated successfully",
                  "timestamp": "2024-01-20T10:30:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "code": "too_small",
                          "path": [
                            "subscriptionId"
                          ],
                          "message": "String must contain at least 1 character(s)"
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "example": "VALIDATION_ERROR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    },
                    "code": {
                      "type": "string",
                      "example": "AUTH_REQUIRED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to reactivate subscription"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown error occurred"
                    },
                    "code": {
                      "type": "string",
                      "example": "REACTIVATE_FAILED"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/update-plan": {
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Update subscription plan",
        "description": "Updates a LemonSqueezy subscription to a different plan/variant. Supports proration options, immediate invoicing, and billing anchor customization. Includes comprehensive metadata tracking for plan changes.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "LemonSqueezy subscription ID to update",
                    "example": "sub_123abc456def"
                  },
                  "variantId": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "New product variant ID (will be converted to number)",
                    "example": 789012
                  },
                  "proration": {
                    "type": "string",
                    "enum": [
                      "immediate",
                      "next_period"
                    ],
                    "default": "immediate",
                    "description": "When to apply the plan change",
                    "example": "immediate"
                  },
                  "invoiceImmediately": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to invoice immediately for the change",
                    "example": false
                  },
                  "disableProrations": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to disable proration calculations",
                    "example": false
                  },
                  "billingAnchor": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 31,
                    "description": "Day of month for billing (1-31)",
                    "example": 15
                  }
                },
                "required": [
                  "subscriptionId",
                  "variantId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription data from LemonSqueezy",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_123abc456def"
                        },
                        "status": {
                          "type": "string",
                          "example": "active"
                        },
                        "variantId": {
                          "type": "string",
                          "example": "789012"
                        },
                        "priceId": {
                          "type": "string",
                          "example": "789012"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "action": {
                              "type": "string",
                              "example": "update_plan"
                            },
                            "proration": {
                              "type": "string",
                              "example": "immediate"
                            },
                            "invoiceImmediately": {
                              "type": "boolean",
                              "example": false
                            },
                            "disableProrations": {
                              "type": "boolean",
                              "example": false
                            },
                            "billingAnchor": {
                              "type": "integer",
                              "example": 15
                            },
                            "updatedAt": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-01-20T10:30:00.000Z"
                            },
                            "updatedBy": {
                              "type": "string",
                              "format": "email",
                              "example": "user@example.com"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription plan updated successfully"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message",
                    "timestamp"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "sub_123abc456def",
                    "status": "active",
                    "variantId": "789012",
                    "priceId": "789012",
                    "updatedAt": "2024-01-20T10:30:00.000Z",
                    "metadata": {
                      "action": "update_plan",
                      "proration": "immediate",
                      "invoiceImmediately": false,
                      "disableProrations": false,
                      "billingAnchor": 15,
                      "updatedAt": "2024-01-20T10:30:00.000Z",
                      "updatedBy": "user@example.com"
                    }
                  },
                  "message": "Subscription plan updated successfully",
                  "timestamp": "2024-01-20T10:30:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "code": "too_small",
                          "path": [
                            "subscriptionId"
                          ],
                          "message": "String must contain at least 1 character(s)"
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "example": "VALIDATION_ERROR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    },
                    "code": {
                      "type": "string",
                      "example": "AUTH_REQUIRED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to update subscription plan"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown error occurred"
                    },
                    "code": {
                      "type": "string",
                      "example": "UPDATE_FAILED"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/lemonsqueezy/update": {
      "post": {
        "tags": [
          "LemonSqueezy - Core"
        ],
        "summary": "Update subscription",
        "description": "Updates a LemonSqueezy subscription with new parameters such as status, cancellation settings, price, or metadata. Includes development mode support and comprehensive error handling with request tracking.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "LemonSqueezy subscription ID to update",
                    "example": "sub_123abc456def"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "cancelled",
                      "expired",
                      "on_trial",
                      "past_due",
                      "paused",
                      "unpaid"
                    ],
                    "description": "New subscription status",
                    "example": "active"
                  },
                  "cancelAtPeriodEnd": {
                    "type": "boolean",
                    "description": "Whether to cancel at the end of current period",
                    "example": false
                  },
                  "priceId": {
                    "type": "string",
                    "description": "New price/variant ID",
                    "example": "price_456def789ghi"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata to update",
                    "additionalProperties": true,
                    "example": {
                      "updatedReason": "user_request",
                      "previousPlan": "basic"
                    }
                  }
                },
                "required": [
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated subscription data from LemonSqueezy",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_123abc456def"
                        },
                        "status": {
                          "type": "string",
                          "example": "active"
                        },
                        "cancelAtPeriodEnd": {
                          "type": "boolean",
                          "example": false
                        },
                        "priceId": {
                          "type": "string",
                          "example": "price_456def789ghi"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-20T10:30:00.000Z"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "requestId": {
                          "type": "string",
                          "format": "uuid",
                          "example": "550e8400-e29b-41d4-a716-446655440000"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "duration": {
                          "type": "string",
                          "example": "150ms"
                        },
                        "userId": {
                          "type": "string",
                          "example": "user_123abc"
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "metadata"
                  ]
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Cache control header",
                "schema": {
                  "type": "string",
                  "example": "no-cache, no-store, must-revalidate"
                }
              },
              "X-Request-ID": {
                "description": "Request tracking ID",
                "schema": {
                  "type": "string",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                }
              },
              "X-Response-Time": {
                "description": "Response time",
                "schema": {
                  "type": "string",
                  "example": "150ms"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid request data"
                    },
                    "code": {
                      "type": "string",
                      "example": "VALIDATION_ERROR"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "example": [
                        {
                          "code": "too_small",
                          "path": [
                            "subscriptionId"
                          ],
                          "message": "Subscription ID is required"
                        }
                      ]
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "code": {
                      "type": "string",
                      "example": "UNAUTHORIZED"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Subscription not found or update failed"
                    },
                    "code": {
                      "type": "string",
                      "example": "SUBSCRIPTION_NOT_FOUND"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update subscription"
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR",
                        "PROVIDER_UNAVAILABLE"
                      ],
                      "example": "INTERNAL_ERROR"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unknown error occurred"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "550e8400-e29b-41d4-a716-446655440000"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "duration": {
                      "type": "string",
                      "example": "150ms"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable - Provider unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update subscription"
                    },
                    "code": {
                      "type": "string",
                      "example": "PROVIDER_UNAVAILABLE"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/payment/account/{userId}": {
      "get": {
        "tags": [
          "Payment Accounts"
        ],
        "summary": "Get user payment account",
        "description": "Retrieves a user's payment account information for a specific payment provider. Returns the account details including customer ID and timestamps. Requires both user ID and provider to be specified.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Internal user ID",
            "example": "user_123abc"
          },
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Payment provider name (e.g., 'lemonsqueezy', 'stripe')",
            "example": "lemonsqueezy"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment account retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Payment account ID",
                      "example": "pay_acc_123abc"
                    },
                    "userId": {
                      "type": "string",
                      "description": "Internal user ID",
                      "example": "user_123abc"
                    },
                    "providerId": {
                      "type": "string",
                      "description": "Payment provider identifier",
                      "example": "lemonsqueezy"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Customer ID from the payment provider",
                      "example": "cus_456def789ghi"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the account was created",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "When the account was last updated",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "providerId",
                    "customerId",
                    "createdAt",
                    "updatedAt"
                  ]
                },
                "examples": {
                  "lemonsqueezy_account": {
                    "summary": "LemonSqueezy payment account",
                    "value": {
                      "id": "pay_acc_123abc",
                      "userId": "user_123abc",
                      "providerId": "lemonsqueezy",
                      "customerId": "cus_456def789ghi",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "stripe_account": {
                    "summary": "Stripe payment account",
                    "value": {
                      "id": "pay_acc_789ghi",
                      "userId": "user_123abc",
                      "providerId": "stripe",
                      "customerId": "cus_stripe_012jkl",
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_user": "User ID is required",
                        "missing_provider": "Provider is required"
                      }
                    }
                  }
                },
                "examples": {
                  "missing_user": {
                    "summary": "Missing user ID",
                    "value": {
                      "error": "User ID is required"
                    }
                  },
                  "missing_provider": {
                    "summary": "Missing provider",
                    "value": {
                      "error": "Provider is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Payment account not found"
                    }
                  }
                },
                "example": {
                  "error": "Payment account not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/payment/account": {
      "post": {
        "tags": [
          "Payment Accounts"
        ],
        "summary": "Create payment account",
        "description": "Creates a new payment account for a user with a specific payment provider. Links the user to their customer ID in the payment provider's system. This is typically called after a successful customer creation in the payment provider.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "Payment provider name (e.g., 'lemonsqueezy', 'stripe')",
                    "example": "lemonsqueezy"
                  },
                  "userId": {
                    "type": "string",
                    "description": "Internal user ID",
                    "example": "user_123abc"
                  },
                  "customerId": {
                    "type": "string",
                    "description": "Customer ID from the payment provider",
                    "example": "cus_456def789ghi"
                  }
                },
                "required": [
                  "provider",
                  "userId",
                  "customerId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Payment account ID",
                      "example": "pay_acc_123abc"
                    },
                    "userId": {
                      "type": "string",
                      "description": "Internal user ID",
                      "example": "user_123abc"
                    },
                    "providerId": {
                      "type": "string",
                      "description": "Payment provider identifier",
                      "example": "lemonsqueezy"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Customer ID from the payment provider",
                      "example": "cus_456def789ghi"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the account was created",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "When the account was last updated",
                      "example": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "providerId",
                    "customerId",
                    "createdAt",
                    "updatedAt"
                  ]
                },
                "example": {
                  "id": "pay_acc_123abc",
                  "userId": "user_123abc",
                  "providerId": "lemonsqueezy",
                  "customerId": "cus_456def789ghi",
                  "createdAt": "2024-01-20T10:30:00.000Z",
                  "updatedAt": "2024-01-20T10:30:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_provider": "Provider is required",
                        "missing_user": "User ID is required",
                        "missing_customer": "Customer ID is required"
                      }
                    }
                  }
                },
                "examples": {
                  "missing_provider": {
                    "summary": "Missing provider",
                    "value": {
                      "error": "Provider is required"
                    }
                  },
                  "missing_user": {
                    "summary": "Missing user ID",
                    "value": {
                      "error": "User ID is required"
                    }
                  },
                  "missing_customer": {
                    "summary": "Missing customer ID",
                    "value": {
                      "error": "Customer ID is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment Accounts"
        ],
        "summary": "Update payment account",
        "description": "Updates an existing payment account with new provider or customer information. Requires the account ID to identify which account to update. This is typically used when a customer ID changes in the payment provider's system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Payment account ID to update",
                    "example": "pay_acc_123abc"
                  },
                  "provider": {
                    "type": "string",
                    "description": "Payment provider name (e.g., 'lemonsqueezy', 'stripe')",
                    "example": "lemonsqueezy"
                  },
                  "userId": {
                    "type": "string",
                    "description": "Internal user ID",
                    "example": "user_123abc"
                  },
                  "customerId": {
                    "type": "string",
                    "description": "New customer ID from the payment provider",
                    "example": "cus_789ghi012jkl"
                  }
                },
                "required": [
                  "id",
                  "provider",
                  "userId",
                  "customerId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Payment account ID",
                      "example": "pay_acc_123abc"
                    },
                    "userId": {
                      "type": "string",
                      "description": "Internal user ID",
                      "example": "user_123abc"
                    },
                    "providerId": {
                      "type": "string",
                      "description": "Payment provider identifier",
                      "example": "lemonsqueezy"
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Updated customer ID from the payment provider",
                      "example": "cus_789ghi012jkl"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the account was originally created",
                      "example": "2024-01-20T10:30:00.000Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "When the account was last updated",
                      "example": "2024-01-20T11:45:00.000Z"
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "providerId",
                    "customerId",
                    "createdAt",
                    "updatedAt"
                  ]
                },
                "example": {
                  "id": "pay_acc_123abc",
                  "userId": "user_123abc",
                  "providerId": "lemonsqueezy",
                  "customerId": "cus_789ghi012jkl",
                  "createdAt": "2024-01-20T10:30:00.000Z",
                  "updatedAt": "2024-01-20T11:45:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_id": "Account ID is required",
                        "missing_provider": "Provider is required",
                        "missing_user": "User ID is required",
                        "missing_customer": "Customer ID is required"
                      }
                    }
                  }
                },
                "examples": {
                  "missing_id": {
                    "summary": "Missing account ID",
                    "value": {
                      "error": "Account ID is required"
                    }
                  },
                  "missing_provider": {
                    "summary": "Missing provider",
                    "value": {
                      "error": "Provider is required"
                    }
                  },
                  "missing_user": {
                    "summary": "Missing user ID",
                    "value": {
                      "error": "User ID is required"
                    }
                  },
                  "missing_customer": {
                    "summary": "Missing customer ID",
                    "value": {
                      "error": "Customer ID is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/checkout": {
      "post": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Create Stripe checkout session",
        "description": "Creates a new Stripe checkout session for the authenticated user. Supports both one-time payments and subscription modes with comprehensive configuration including trial periods, billing intervals, and custom metadata. Automatically creates or retrieves Stripe customer.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priceId": {
                    "type": "string",
                    "description": "Stripe price ID for the product/service",
                    "example": "price_1234567890abcdef"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "one_time",
                      "subscription"
                    ],
                    "default": "one_time",
                    "description": "Checkout mode",
                    "example": "subscription"
                  },
                  "trialPeriodDays": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "description": "Trial period in days (subscription mode only)",
                    "example": 14
                  },
                  "billingInterval": {
                    "type": "string",
                    "enum": [
                      "month",
                      "year"
                    ],
                    "default": "month",
                    "description": "Billing interval for subscriptions",
                    "example": "month"
                  },
                  "successUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to redirect after successful payment",
                    "example": "https://example.com/success"
                  },
                  "cancelUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to redirect after cancelled payment",
                    "example": "https://example.com/cancel"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the checkout session",
                    "properties": {
                      "planId": {
                        "type": "string",
                        "example": "pro_plan"
                      },
                      "planName": {
                        "type": "string",
                        "example": "Pro Plan"
                      }
                    },
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "priceId",
                  "successUrl",
                  "cancelUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Checkout session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Stripe checkout session ID",
                          "example": "cs_test_1234567890abcdef"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "Stripe checkout URL",
                          "example": "https://checkout.stripe.com/pay/cs_test_1234567890abcdef"
                        }
                      }
                    },
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Checkout session created successfully"
                    }
                  },
                  "required": [
                    "data",
                    "status",
                    "message"
                  ]
                },
                "example": {
                  "data": {
                    "id": "cs_test_1234567890abcdef",
                    "url": "https://checkout.stripe.com/pay/cs_test_1234567890abcdef"
                  },
                  "status": 200,
                  "message": "Checkout session created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Failed to create customer or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create customer"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unable to create Stripe customer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "message": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create checkout session"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to create checkout session"
                    },
                    "details": {
                      "type": "string",
                      "description": "Error stack trace (development only)",
                      "example": "Error: Invalid price ID..."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Retrieve checkout session",
        "description": "Retrieves a Stripe checkout session by session ID with expanded line items and subscription data. Used to verify payment status and get session details after checkout completion.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe checkout session ID",
            "example": "cs_test_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout session retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "description": "Complete Stripe checkout session object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "cs_test_1234567890abcdef"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "complete",
                            "expired"
                          ],
                          "example": "complete"
                        },
                        "payment_status": {
                          "type": "string",
                          "enum": [
                            "paid",
                            "unpaid",
                            "no_payment_required"
                          ],
                          "example": "paid"
                        },
                        "amount_total": {
                          "type": "integer",
                          "example": 2999
                        },
                        "currency": {
                          "type": "string",
                          "example": "usd"
                        },
                        "customer": {
                          "type": "string",
                          "example": "cus_1234567890abcdef"
                        },
                        "subscription": {
                          "type": "string",
                          "nullable": true,
                          "example": "sub_1234567890abcdef"
                        },
                        "line_items": {
                          "type": "object",
                          "description": "Expanded line items"
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "Session status",
                      "example": "complete"
                    },
                    "customer": {
                      "type": "string",
                      "description": "Stripe customer ID",
                      "example": "cus_1234567890abcdef"
                    },
                    "subscription": {
                      "type": "string",
                      "nullable": true,
                      "description": "Stripe subscription ID (if applicable)",
                      "example": "sub_1234567890abcdef"
                    }
                  },
                  "required": [
                    "session",
                    "status",
                    "customer"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Session ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Session ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to retrieve checkout session"
                    },
                    "details": {
                      "type": "string",
                      "description": "Error stack trace (development only)",
                      "example": "Error: No such checkout session..."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-intent": {
      "post": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Create payment intent",
        "description": "Creates a new Stripe payment intent for the authenticated user. Automatically creates or retrieves the Stripe customer and associates the payment with user metadata. Used for direct payment processing without checkout sessions.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 50,
                    "description": "Payment amount in cents",
                    "example": 2999
                  },
                  "currency": {
                    "type": "string",
                    "default": "usd",
                    "description": "Payment currency (ISO 4217)",
                    "example": "usd"
                  },
                  "planId": {
                    "type": "string",
                    "description": "Plan identifier for metadata",
                    "example": "pro_plan"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the payment",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "feature": "premium_access",
                      "source": "website"
                    }
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Payment intent ID",
                      "example": "pi_1234567890abcdef"
                    },
                    "client_secret": {
                      "type": "string",
                      "description": "Client secret for confirming payment",
                      "example": "pi_1234567890abcdef_secret_xyz"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "requires_payment_method",
                        "requires_confirmation",
                        "requires_action",
                        "processing",
                        "requires_capture",
                        "canceled",
                        "succeeded"
                      ],
                      "example": "requires_payment_method"
                    },
                    "amount": {
                      "type": "integer",
                      "description": "Payment amount in cents",
                      "example": 2999
                    },
                    "currency": {
                      "type": "string",
                      "description": "Payment currency",
                      "example": "usd"
                    },
                    "customer": {
                      "type": "string",
                      "description": "Stripe customer ID",
                      "example": "cus_1234567890abcdef"
                    }
                  },
                  "required": [
                    "id",
                    "client_secret",
                    "status",
                    "amount",
                    "currency"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Failed to create customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create customer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create payment intent"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Verify payment intent",
        "description": "Verifies a Stripe payment intent by ID and returns the payment verification status. Used to confirm payment completion and retrieve payment details after processing.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "payment_intent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe payment intent ID",
            "example": "pi_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment verification completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether payment was successful",
                      "example": true
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "requires_payment_method",
                        "requires_confirmation",
                        "requires_action",
                        "processing",
                        "requires_capture",
                        "canceled",
                        "succeeded"
                      ],
                      "example": "succeeded"
                    },
                    "payment_intent": {
                      "type": "object",
                      "description": "Payment intent details",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "pi_1234567890abcdef"
                        },
                        "amount": {
                          "type": "integer",
                          "example": 2999
                        },
                        "currency": {
                          "type": "string",
                          "example": "usd"
                        },
                        "status": {
                          "type": "string",
                          "example": "succeeded"
                        },
                        "customer": {
                          "type": "string",
                          "example": "cus_1234567890abcdef"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Verification message",
                      "example": "Payment completed successfully"
                    }
                  },
                  "required": [
                    "success",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Payment intent ID required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Payment intent ID required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to verify payment"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-methods/{id}": {
      "get": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Get payment method by ID",
        "description": "Retrieves a specific payment method by ID for the authenticated user. Includes security verification to ensure the payment method belongs to the current user's customer. Returns detailed payment method information including card details and default status.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe payment method ID",
            "example": "pm_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Payment method ID",
                          "example": "pm_1234567890abcdef"
                        },
                        "type": {
                          "type": "string",
                          "description": "Payment method type",
                          "example": "card"
                        },
                        "card": {
                          "type": "object",
                          "nullable": true,
                          "description": "Card details (if type is card)",
                          "properties": {
                            "brand": {
                              "type": "string",
                              "example": "visa"
                            },
                            "last4": {
                              "type": "string",
                              "example": "4242"
                            },
                            "funding": {
                              "type": "string",
                              "enum": [
                                "credit",
                                "debit",
                                "prepaid",
                                "unknown"
                              ],
                              "example": "credit"
                            },
                            "country": {
                              "type": "string",
                              "example": "US"
                            },
                            "fingerprint": {
                              "type": "string",
                              "example": "abc123def456"
                            }
                          }
                        },
                        "billing_details": {
                          "type": "object",
                          "description": "Billing details",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "example": "john@example.com"
                            },
                            "phone": {
                              "type": "string",
                              "nullable": true,
                              "example": "+1234567890"
                            },
                            "address": {
                              "type": "object",
                              "nullable": true,
                              "properties": {
                                "line1": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "123 Main St"
                                },
                                "city": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "New York"
                                },
                                "state": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "NY"
                                },
                                "postal_code": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "10001"
                                },
                                "country": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "US"
                                }
                              }
                            }
                          }
                        },
                        "created": {
                          "type": "integer",
                          "description": "Unix timestamp of creation",
                          "example": 1640995200
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Payment method metadata",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "is_default": {
                          "type": "boolean",
                          "description": "Whether this is the default payment method",
                          "example": true
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Stripe customer ID",
                          "example": "cus_1234567890abcdef"
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "created",
                        "is_default",
                        "customer_id"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Payment method ID required or not associated with customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_id": "Payment method ID is required",
                        "no_customer": "Payment method not associated with any customer",
                        "stripe_error": "Invalid payment method ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Payment method does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized - payment method does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Payment method or customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "payment_method": "Payment method not found",
                        "customer": "Customer not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to retrieve payment method"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Delete payment method by ID",
        "description": "Deletes a specific payment method by ID for the authenticated user. Includes security verification and automatic default payment method reassignment if the deleted method was the default.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe payment method ID to delete",
            "example": "pm_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment method deleted successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "was_default": {
                          "type": "boolean",
                          "description": "Whether the deleted payment method was the default",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Payment method deleted successfully",
                  "data": {
                    "was_default": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Payment method ID required or not associated with customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "missing_id": "Payment method ID is required",
                        "no_customer": "Payment method not associated with a customer",
                        "stripe_error": "Invalid payment method ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Payment method does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized - payment method does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Payment method or customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "payment_method": "Payment method not found",
                        "customer": "Customer not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete payment method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-methods/create": {
      "post": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Create payment method from setup intent",
        "description": "Creates and attaches a payment method to the authenticated user's customer from a completed setup intent. Automatically creates Stripe customer if needed, handles payment method attachment, and optionally sets as default payment method.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "setup_intent_id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Stripe setup intent ID (must be succeeded)",
                    "example": "seti_1234567890abcdef"
                  },
                  "set_as_default": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to set this payment method as default",
                    "example": true
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the payment method",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "nickname": "Primary Card",
                      "source": "mobile_app"
                    }
                  }
                },
                "required": [
                  "setup_intent_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Payment method ID",
                          "example": "pm_1234567890abcdef"
                        },
                        "type": {
                          "type": "string",
                          "description": "Payment method type",
                          "example": "card"
                        },
                        "card": {
                          "type": "object",
                          "nullable": true,
                          "description": "Card details (if type is card)",
                          "properties": {
                            "brand": {
                              "type": "string",
                              "example": "visa"
                            },
                            "last4": {
                              "type": "string",
                              "example": "4242"
                            },
                            "exp_month": {
                              "type": "integer",
                              "example": 12
                            },
                            "exp_year": {
                              "type": "integer",
                              "example": 2025
                            },
                            "funding": {
                              "type": "string",
                              "enum": [
                                "credit",
                                "debit",
                                "prepaid",
                                "unknown"
                              ],
                              "example": "credit"
                            }
                          }
                        },
                        "created": {
                          "type": "integer",
                          "description": "Unix timestamp of creation",
                          "example": 1640995200
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Payment method metadata",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "example": {
                            "userId": "user_123abc",
                            "nickname": "Primary Card"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment method created successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "pm_1234567890abcdef",
                    "type": "card",
                    "card": {
                      "brand": "visa",
                      "last4": "4242",
                      "exp_month": 12,
                      "exp_year": 2025,
                      "funding": "credit"
                    },
                    "created": 1640995200,
                    "metadata": {
                      "userId": "user_123abc",
                      "nickname": "Primary Card"
                    }
                  },
                  "message": "Payment method created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid setup intent or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "validation": "Invalid request data",
                        "setup_intent_failed": "Setup intent has not succeeded",
                        "no_payment_method": "No payment method found in setup intent",
                        "stripe_error": "Invalid setup intent ID"
                      }
                    },
                    "details": {
                      "type": "object",
                      "description": "Validation error details (if applicable)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to create payment method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-methods/delete": {
      "delete": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Delete payment method",
        "description": "Safely deletes a payment method with comprehensive ownership validation, automatic default payment method reassignment, and subscription impact analysis. Handles edge cases like default method deletion and provides detailed response metadata.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentMethodId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Stripe payment method ID to delete",
                    "example": "pm_1234567890abcdef"
                  }
                },
                "required": [
                  "paymentMethodId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment method deleted successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "was_default": {
                          "type": "boolean",
                          "description": "Whether the deleted payment method was the default",
                          "example": true
                        },
                        "affected_subscriptions": {
                          "type": "integer",
                          "description": "Number of active subscriptions that were using this payment method",
                          "example": 2
                        },
                        "new_default_payment_method": {
                          "type": "string",
                          "nullable": true,
                          "description": "ID of the new default payment method (if reassigned)",
                          "example": "pm_0987654321fedcba"
                        }
                      },
                      "required": [
                        "was_default",
                        "affected_subscriptions",
                        "new_default_payment_method"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "data"
                  ]
                },
                "examples": {
                  "default_method_deleted": {
                    "summary": "Default payment method deleted with reassignment",
                    "value": {
                      "success": true,
                      "message": "Payment method deleted successfully",
                      "data": {
                        "was_default": true,
                        "affected_subscriptions": 1,
                        "new_default_payment_method": "pm_0987654321fedcba"
                      }
                    }
                  },
                  "regular_method_deleted": {
                    "summary": "Regular payment method deleted",
                    "value": {
                      "success": true,
                      "message": "Payment method deleted successfully",
                      "data": {
                        "was_default": false,
                        "affected_subscriptions": 0,
                        "new_default_payment_method": null
                      }
                    }
                  },
                  "last_method_deleted": {
                    "summary": "Last payment method deleted",
                    "value": {
                      "success": true,
                      "message": "Payment method deleted successfully",
                      "data": {
                        "was_default": true,
                        "affected_subscriptions": 0,
                        "new_default_payment_method": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data or payment method issues",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "validation": "Invalid request data",
                        "no_customer": "Payment method not associated with a customer",
                        "stripe_error": "Stripe error: Invalid payment method ID"
                      }
                    },
                    "details": {
                      "type": "array",
                      "description": "Validation error details (if applicable)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "example": "paymentMethodId"
                          },
                          "message": {
                            "type": "string",
                            "example": "Payment method ID is required"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Payment method does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Access denied: payment method does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Payment method or customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "payment_method": "Stripe error: No such payment method",
                        "customer": "Customer not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to delete payment method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-methods/list": {
      "get": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "List user payment methods",
        "description": "Retrieves all payment methods for the authenticated user. Returns formatted payment method data sorted by default status and creation date. Includes comprehensive metadata and card details.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Payment methods retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "description": "Array of payment methods (sorted by default status, then creation date)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Payment method ID",
                            "example": "pm_1234567890abcdef"
                          },
                          "type": {
                            "type": "string",
                            "description": "Payment method type",
                            "example": "card"
                          },
                          "card": {
                            "type": "object",
                            "nullable": true,
                            "description": "Card details (if type is card)",
                            "properties": {
                              "brand": {
                                "type": "string",
                                "example": "visa"
                              },
                              "last4": {
                                "type": "string",
                                "example": "4242"
                              },
                              "funding": {
                                "type": "string",
                                "enum": [
                                  "credit",
                                  "debit",
                                  "prepaid",
                                  "unknown"
                                ],
                                "example": "credit"
                              },
                              "country": {
                                "type": "string",
                                "example": "US"
                              }
                            }
                          },
                          "billing_details": {
                            "type": "object",
                            "description": "Billing details",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "example": "John Doe"
                              },
                              "email": {
                                "type": "string",
                                "nullable": true,
                                "example": "john@example.com"
                              },
                              "phone": {
                                "type": "string",
                                "nullable": true,
                                "example": "+1234567890"
                              },
                              "address": {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "line1": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "123 Main St"
                                  },
                                  "city": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "New York"
                                  },
                                  "state": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "NY"
                                  },
                                  "postal_code": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "10001"
                                  },
                                  "country": {
                                    "type": "string",
                                    "nullable": true,
                                    "example": "US"
                                  }
                                }
                              }
                            }
                          },
                          "created": {
                            "type": "integer",
                            "description": "Unix timestamp of creation",
                            "example": 1640995200
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Payment method metadata",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "is_default": {
                            "type": "boolean",
                            "description": "Whether this is the default payment method",
                            "example": true
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "created",
                          "is_default"
                        ]
                      }
                    },
                    "meta": {
                      "type": "object",
                      "description": "Response metadata",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of payment methods",
                          "example": 3
                        },
                        "default_payment_method": {
                          "type": "string",
                          "nullable": true,
                          "description": "Default payment method ID",
                          "example": "pm_1234567890abcdef"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Stripe customer ID",
                          "example": "cus_1234567890abcdef"
                        }
                      },
                      "required": [
                        "total",
                        "customer_id"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Optional message when no payment methods are found",
                      "example": "No payment methods found"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "examples": {
                  "with_payment_methods": {
                    "summary": "User with payment methods",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "id": "pm_1234567890abcdef",
                          "type": "card",
                          "card": {
                            "brand": "visa",
                            "last4": "4242",
                            "funding": "credit",
                            "country": "US"
                          },
                          "billing_details": {
                            "name": "John Doe",
                            "email": "john@example.com"
                          },
                          "created": 1640995200,
                          "metadata": {},
                          "is_default": true
                        },
                        {
                          "id": "pm_0987654321fedcba",
                          "type": "card",
                          "card": {
                            "brand": "mastercard",
                            "last4": "1234",
                            "funding": "credit",
                            "country": "US"
                          },
                          "billing_details": {
                            "name": "John Doe"
                          },
                          "created": 1640908800,
                          "metadata": {},
                          "is_default": false
                        }
                      ],
                      "meta": {
                        "total": 2,
                        "default_payment_method": "pm_1234567890abcdef",
                        "customer_id": "cus_1234567890abcdef"
                      }
                    }
                  },
                  "no_payment_methods": {
                    "summary": "User with no payment methods",
                    "value": {
                      "success": true,
                      "data": [],
                      "message": "No payment methods found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Customer not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to list payment methods"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/payment-methods/update": {
      "put": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Update payment method",
        "description": "Updates a payment method's billing details, metadata, and optionally sets it as the default payment method. Includes comprehensive ownership validation and detailed error handling.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method_id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Stripe payment method ID to update",
                    "example": "pm_1234567890abcdef"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the payment method",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "nickname": "Primary Card",
                      "category": "business"
                    }
                  },
                  "billing_details": {
                    "type": "object",
                    "description": "Billing details to update",
                    "properties": {
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Cardholder name",
                        "example": "John Doe"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Billing email address",
                        "example": "john@example.com"
                      },
                      "phone": {
                        "type": "string",
                        "description": "Phone number",
                        "example": "+1234567890"
                      },
                      "address": {
                        "type": "object",
                        "description": "Billing address",
                        "properties": {
                          "line1": {
                            "type": "string",
                            "description": "Address line 1",
                            "example": "123 Main St"
                          },
                          "line2": {
                            "type": "string",
                            "description": "Address line 2",
                            "example": "Apt 4B"
                          },
                          "city": {
                            "type": "string",
                            "description": "City",
                            "example": "New York"
                          },
                          "state": {
                            "type": "string",
                            "description": "State/Province",
                            "example": "NY"
                          },
                          "postal_code": {
                            "type": "string",
                            "description": "Postal/ZIP code",
                            "example": "10001"
                          },
                          "country": {
                            "type": "string",
                            "minLength": 2,
                            "maxLength": 2,
                            "description": "2-letter country code",
                            "example": "US"
                          }
                        }
                      }
                    }
                  },
                  "set_as_default": {
                    "type": "boolean",
                    "description": "Whether to set this payment method as default",
                    "example": true
                  }
                },
                "required": [
                  "payment_method_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Payment method ID",
                          "example": "pm_1234567890abcdef"
                        },
                        "type": {
                          "type": "string",
                          "description": "Payment method type",
                          "example": "card"
                        },
                        "card": {
                          "type": "object",
                          "nullable": true,
                          "description": "Card details (if type is card)",
                          "properties": {
                            "brand": {
                              "type": "string",
                              "example": "visa"
                            },
                            "last4": {
                              "type": "string",
                              "example": "4242"
                            },
                            "funding": {
                              "type": "string",
                              "enum": [
                                "credit",
                                "debit",
                                "prepaid",
                                "unknown"
                              ],
                              "example": "credit"
                            }
                          }
                        },
                        "billing_details": {
                          "type": "object",
                          "description": "Updated billing details",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "example": "John Doe"
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "example": "john@example.com"
                            },
                            "phone": {
                              "type": "string",
                              "nullable": true,
                              "example": "+1234567890"
                            },
                            "address": {
                              "type": "object",
                              "nullable": true,
                              "properties": {
                                "line1": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "123 Main St"
                                },
                                "city": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "New York"
                                },
                                "state": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "NY"
                                },
                                "postal_code": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "10001"
                                },
                                "country": {
                                  "type": "string",
                                  "nullable": true,
                                  "example": "US"
                                }
                              }
                            }
                          }
                        },
                        "created": {
                          "type": "integer",
                          "description": "Unix timestamp of creation",
                          "example": 1640995200
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Payment method metadata",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "is_default": {
                          "type": "boolean",
                          "description": "Whether this is the default payment method",
                          "example": true
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "created"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment method updated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data or Stripe error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "validation": "Invalid request data",
                        "no_customer": "Payment method not associated with a customer",
                        "stripe_error": "Stripe error: Invalid payment method ID"
                      }
                    },
                    "details": {
                      "type": "array",
                      "description": "Validation error details (if applicable)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "example": "billing_details.email"
                          },
                          "message": {
                            "type": "string",
                            "example": "Invalid email format"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Payment method does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Access denied: payment method does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Payment method or customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "payment_method": "Stripe error: No such payment method",
                        "customer": "Customer not found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to update payment method"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Stripe - Payment Methods"
        ],
        "summary": "Set payment method as default",
        "description": "Sets the specified payment method as the default for the customer. Simpler endpoint focused only on default status change.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method_id": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Stripe payment method ID to set as default",
                    "example": "pm_1234567890abcdef"
                  }
                },
                "required": [
                  "payment_method_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method set as default successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment method set as default successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid request data or Stripe error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "examples": {
                        "validation": "Invalid request data",
                        "stripe_error": "Stripe error: Invalid payment method ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Payment method does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Access denied: payment method does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to set default payment method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/setup-intent/{id}": {
      "get": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Retrieve setup intent by ID",
        "description": "Retrieves a specific Stripe setup intent by ID for the authenticated user. Includes security verification to ensure the setup intent belongs to the current user's customer. Returns complete setup intent details including status and payment method information.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe setup intent ID",
            "example": "seti_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Setup intent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Setup intent ID",
                          "example": "seti_1234567890abcdef"
                        },
                        "client_secret": {
                          "type": "string",
                          "description": "Client secret for confirming setup",
                          "example": "seti_1234567890abcdef_secret_xyz"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "requires_payment_method",
                            "requires_confirmation",
                            "requires_action",
                            "processing",
                            "canceled",
                            "succeeded"
                          ],
                          "example": "succeeded"
                        },
                        "usage": {
                          "type": "string",
                          "enum": [
                            "on_session",
                            "off_session"
                          ],
                          "example": "off_session"
                        },
                        "customer": {
                          "type": "string",
                          "description": "Stripe customer ID",
                          "example": "cus_1234567890abcdef"
                        },
                        "payment_method": {
                          "type": "string",
                          "nullable": true,
                          "description": "Attached payment method ID",
                          "example": "pm_1234567890abcdef"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Unix timestamp of creation",
                          "example": 1640995200
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Setup intent metadata",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "id",
                        "client_secret",
                        "status",
                        "usage",
                        "customer",
                        "created"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "seti_1234567890abcdef",
                    "client_secret": "seti_1234567890abcdef_secret_xyz",
                    "status": "succeeded",
                    "usage": "off_session",
                    "customer": "cus_1234567890abcdef",
                    "payment_method": "pm_1234567890abcdef",
                    "created": 1640995200,
                    "metadata": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Setup intent ID is required or Stripe error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Setup intent ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Setup intent does not belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized - setup intent does not belong to user"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Setup intent or customer not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Setup intent not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to retrieve setup intent"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/setup-intent": {
      "post": {
        "tags": [
          "Stripe - Core"
        ],
        "summary": "Create setup intent",
        "description": "Creates a new Stripe setup intent for the authenticated user to save payment methods for future use. Automatically creates or retrieves the Stripe customer and prepares for payment method attachment without immediate charge.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Setup intent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Setup intent ID",
                      "example": "seti_1234567890abcdef"
                    },
                    "client_secret": {
                      "type": "string",
                      "description": "Client secret for confirming setup",
                      "example": "seti_1234567890abcdef_secret_xyz"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "requires_payment_method",
                        "requires_confirmation",
                        "requires_action",
                        "processing",
                        "canceled",
                        "succeeded"
                      ],
                      "example": "requires_payment_method"
                    },
                    "usage": {
                      "type": "string",
                      "enum": [
                        "on_session",
                        "off_session"
                      ],
                      "example": "off_session"
                    },
                    "customer": {
                      "type": "string",
                      "description": "Stripe customer ID",
                      "example": "cus_1234567890abcdef"
                    },
                    "created": {
                      "type": "integer",
                      "description": "Unix timestamp of creation",
                      "example": 1640995200
                    }
                  },
                  "required": [
                    "id",
                    "client_secret",
                    "status",
                    "usage"
                  ]
                },
                "example": {
                  "id": "seti_1234567890abcdef",
                  "client_secret": "seti_1234567890abcdef_secret_xyz",
                  "status": "requires_payment_method",
                  "usage": "off_session",
                  "customer": "cus_1234567890abcdef",
                  "created": 1640995200
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create setup intent"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/subscription/{subscriptionId}/cancel": {
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Cancel subscription by ID",
        "description": "Cancels a specific subscription with comprehensive database synchronization and automatic email notifications. Supports both immediate and end-of-period cancellation with detailed response metadata.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe subscription ID to cancel",
            "example": "sub_1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancelAtPeriodEnd": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to cancel at period end (true) or immediately (false)",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Stripe subscription ID",
                          "example": "sub_1234567890abcdef"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "canceled"
                          ],
                          "example": "active"
                        },
                        "cancel_at_period_end": {
                          "type": "boolean",
                          "description": "Whether subscription will cancel at period end",
                          "example": true
                        },
                        "canceled_at": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Unix timestamp when subscription was cancelled",
                          "example": 1640995200
                        },
                        "current_period_end": {
                          "type": "integer",
                          "description": "Unix timestamp of current period end",
                          "example": 1643673600
                        },
                        "priceId": {
                          "type": "string",
                          "description": "Stripe price ID",
                          "example": "price_1234567890abcdef"
                        },
                        "currentPeriodEnd": {
                          "type": "integer",
                          "description": "Current period end timestamp",
                          "example": 1643673600
                        }
                      },
                      "required": [
                        "id",
                        "status",
                        "cancel_at_period_end",
                        "current_period_end"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "examples": {
                        "period_end": "Subscription will be cancelled at the end of the current period",
                        "immediate": "Subscription cancelled immediately"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "examples": {
                  "cancel_at_period_end": {
                    "summary": "Cancel at period end",
                    "value": {
                      "success": true,
                      "data": {
                        "id": "sub_1234567890abcdef",
                        "status": "active",
                        "cancel_at_period_end": true,
                        "canceled_at": 1640995200,
                        "current_period_end": 1643673600,
                        "priceId": "price_1234567890abcdef",
                        "currentPeriodEnd": 1643673600
                      },
                      "message": "Subscription will be cancelled at the end of the current period"
                    }
                  },
                  "cancel_immediately": {
                    "summary": "Cancel immediately",
                    "value": {
                      "success": true,
                      "data": {
                        "id": "sub_1234567890abcdef",
                        "status": "canceled",
                        "cancel_at_period_end": false,
                        "canceled_at": 1640995200,
                        "current_period_end": 1640995200,
                        "priceId": "price_1234567890abcdef",
                        "currentPeriodEnd": 1640995200
                      },
                      "message": "Subscription cancelled immediately"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to cancel subscription"
                    }
                  }
                }
              }
            }
          }
        },
        "x-email-notification": {
          "description": "Automatic email notification sent to customer",
          "template": "subscription_cancellation",
          "data": [
            {
              "customerName": "Customer display name"
            },
            {
              "customerEmail": "Customer email address"
            },
            {
              "planName": "Subscription plan name"
            },
            {
              "subscriptionId": "Stripe subscription ID"
            },
            {
              "cancelAtPeriodEnd": "Cancellation timing"
            },
            {
              "currentPeriodEnd": "End of current period"
            },
            {
              "reactivateUrl": "URL to reactivate subscription"
            }
          ]
        }
      }
    },
    "/api/stripe/subscription/{subscriptionId}/reactivate": {
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Reactivate cancelled subscription",
        "description": "Reactivates a subscription that was scheduled for cancellation at period end. Includes ownership verification, database synchronization, and automatic email notifications. Only works for subscriptions with cancelAtPeriodEnd=true.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe subscription ID to reactivate",
            "example": "sub_1234567890abcdef"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription reactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Stripe subscription ID",
                          "example": "sub_1234567890abcdef"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "trialing"
                          ],
                          "example": "active"
                        },
                        "cancel_at_period_end": {
                          "type": "boolean",
                          "description": "Whether subscription will cancel at period end (should be false after reactivation)",
                          "example": false
                        },
                        "canceled_at": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Unix timestamp when subscription was cancelled (should be null after reactivation)",
                          "example": null
                        },
                        "current_period_start": {
                          "type": "integer",
                          "description": "Unix timestamp of current period start",
                          "example": 1640995200
                        },
                        "current_period_end": {
                          "type": "integer",
                          "description": "Unix timestamp of current period end",
                          "example": 1643673600
                        }
                      },
                      "required": [
                        "id",
                        "status",
                        "cancel_at_period_end",
                        "current_period_start",
                        "current_period_end"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription reactivated successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "sub_1234567890abcdef",
                    "status": "active",
                    "cancel_at_period_end": false,
                    "canceled_at": null,
                    "current_period_start": 1640995200,
                    "current_period_end": 1643673600
                  },
                  "message": "Subscription reactivated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Subscription not scheduled for cancellation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Subscription is not scheduled for cancellation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Subscription not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Subscription not found or access denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to reactivate subscription"
                    }
                  }
                }
              }
            }
          }
        },
        "x-email-notification": {
          "description": "Automatic email notification sent to customer",
          "template": "subscription_reactivated",
          "data": [
            {
              "customerName": "Customer display name"
            },
            {
              "customerEmail": "Customer email address"
            },
            {
              "planName": "Subscription plan name"
            },
            {
              "subscriptionId": "Stripe subscription ID"
            },
            {
              "manageSubscriptionUrl": "URL to manage subscription"
            }
          ]
        }
      }
    },
    "/api/stripe/subscription/{subscriptionId}/update": {
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Update subscription plan",
        "description": "Updates a subscription to a new plan with comprehensive validation, ownership verification, database synchronization, and automatic email notifications. Includes plan validation and subscription status checks.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe subscription ID to update",
            "example": "sub_1234567890abcdef"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPlanId": {
                    "type": "string",
                    "description": "New plan ID (must be valid PaymentPlan)",
                    "example": "pro"
                  },
                  "newPriceId": {
                    "type": "string",
                    "description": "New Stripe price ID",
                    "example": "price_0987654321fedcba"
                  }
                },
                "required": [
                  "newPlanId",
                  "newPriceId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Stripe subscription ID",
                          "example": "sub_1234567890abcdef"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "trialing",
                            "past_due"
                          ],
                          "example": "active"
                        },
                        "customer": {
                          "type": "string",
                          "description": "Stripe customer ID",
                          "example": "cus_1234567890abcdef"
                        },
                        "current_period_start": {
                          "type": "integer",
                          "description": "Unix timestamp of current period start",
                          "example": 1640995200
                        },
                        "current_period_end": {
                          "type": "integer",
                          "description": "Unix timestamp of current period end",
                          "example": 1643673600
                        },
                        "items": {
                          "type": "object",
                          "description": "Subscription items with new price",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "price": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "price_0987654321fedcba"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "status",
                        "customer",
                        "current_period_start",
                        "current_period_end"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Plan updated to pro successfully"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "sub_1234567890abcdef",
                    "status": "active",
                    "customer": "cus_1234567890abcdef",
                    "current_period_start": 1640995200,
                    "current_period_end": 1643673600,
                    "items": {
                      "data": [
                        {
                          "price": {
                            "id": "price_0987654321fedcba"
                          }
                        }
                      ]
                    }
                  },
                  "message": "Plan updated to pro successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid plan ID or subscription not active",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "invalid_plan": "Invalid plan ID",
                        "not_active": "Subscription is not active"
                      }
                    }
                  }
                },
                "examples": {
                  "invalid_plan": {
                    "summary": "Invalid plan ID",
                    "value": {
                      "error": "Invalid plan ID"
                    }
                  },
                  "not_active": {
                    "summary": "Subscription not active",
                    "value": {
                      "error": "Subscription is not active"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Subscription not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Subscription not found or access denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to update subscription"
                    }
                  }
                }
              }
            }
          }
        },
        "x-email-notification": {
          "description": "Automatic email notification sent to customer",
          "template": "subscription_plan_changed",
          "data": [
            {
              "customerName": "Customer display name"
            },
            {
              "customerEmail": "Customer email address"
            },
            {
              "oldPlanName": "Previous plan name"
            },
            {
              "newPlanName": "New plan name"
            },
            {
              "subscriptionId": "Stripe subscription ID"
            },
            {
              "manageSubscriptionUrl": "URL to manage subscription"
            }
          ]
        }
      }
    },
    "/api/stripe/subscription/portal": {
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Create billing portal session",
        "description": "Creates a Stripe billing portal session for the authenticated user to manage their subscription, payment methods, and billing history. Automatically redirects back to the billing settings page after completion.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Billing portal session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Billing portal session ID",
                          "example": "bps_1234567890abcdef"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "Billing portal URL",
                          "example": "https://billing.stripe.com/session/abc123def456"
                        },
                        "customer": {
                          "type": "string",
                          "description": "Stripe customer ID",
                          "example": "cus_1234567890abcdef"
                        },
                        "return_url": {
                          "type": "string",
                          "format": "uri",
                          "description": "Return URL after portal session",
                          "example": "https://example.com/settings/billing"
                        },
                        "created": {
                          "type": "integer",
                          "description": "Unix timestamp of session creation",
                          "example": 1640995200
                        },
                        "livemode": {
                          "type": "boolean",
                          "description": "Whether session is in live mode",
                          "example": false
                        }
                      },
                      "required": [
                        "id",
                        "url",
                        "customer",
                        "return_url",
                        "created",
                        "livemode"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Billing portal session created"
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "bps_1234567890abcdef",
                    "url": "https://billing.stripe.com/session/abc123def456",
                    "customer": "cus_1234567890abcdef",
                    "return_url": "https://example.com/settings/billing",
                    "created": 1640995200,
                    "livemode": false
                  },
                  "message": "Billing portal session created"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Stripe customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Stripe customer ID not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create billing portal session"
                    }
                  }
                }
              }
            }
          }
        },
        "x-portal-features": {
          "description": "Features available in the billing portal",
          "features": [
            "View and download invoices",
            "Update payment methods",
            "Change subscription plan",
            "Cancel subscription",
            "Update billing address",
            "View payment history",
            "Manage tax information"
          ]
        }
      }
    },
    "/api/stripe/subscription": {
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Create subscription",
        "description": "Creates a new Stripe subscription for the authenticated user with specified price and payment method. Automatically creates or retrieves Stripe customer and includes comprehensive metadata tracking.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priceId": {
                    "type": "string",
                    "description": "Stripe price ID for the subscription",
                    "example": "price_1234567890abcdef"
                  },
                  "paymentMethodId": {
                    "type": "string",
                    "description": "Stripe payment method ID to use for the subscription",
                    "example": "pm_1234567890abcdef"
                  },
                  "trialPeriodDays": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Number of trial days (optional)",
                    "example": 14
                  }
                },
                "required": [
                  "priceId",
                  "paymentMethodId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Stripe subscription ID",
                      "example": "sub_1234567890abcdef"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "canceled",
                        "incomplete",
                        "incomplete_expired",
                        "past_due",
                        "trialing",
                        "unpaid"
                      ],
                      "example": "active"
                    },
                    "customer": {
                      "type": "string",
                      "description": "Stripe customer ID",
                      "example": "cus_1234567890abcdef"
                    },
                    "current_period_start": {
                      "type": "integer",
                      "description": "Unix timestamp of current period start",
                      "example": 1640995200
                    },
                    "current_period_end": {
                      "type": "integer",
                      "description": "Unix timestamp of current period end",
                      "example": 1643673600
                    },
                    "trial_start": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Unix timestamp of trial start",
                      "example": 1640995200
                    },
                    "trial_end": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Unix timestamp of trial end",
                      "example": 1642204800
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Subscription metadata",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "user_123abc"
                        }
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "status",
                    "customer",
                    "current_period_start",
                    "current_period_end"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Failed to create customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create customer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create subscription"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Update subscription",
        "description": "Updates an existing Stripe subscription with new price or cancellation settings. Includes comprehensive metadata tracking and validation.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "description": "Stripe subscription ID to update",
                    "example": "sub_1234567890abcdef"
                  },
                  "priceId": {
                    "type": "string",
                    "description": "New Stripe price ID (optional)",
                    "example": "price_0987654321fedcba"
                  },
                  "cancelAtPeriodEnd": {
                    "type": "boolean",
                    "description": "Whether to cancel at period end (optional)",
                    "example": false
                  }
                },
                "required": [
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Stripe subscription ID",
                      "example": "sub_1234567890abcdef"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "canceled",
                        "incomplete",
                        "incomplete_expired",
                        "past_due",
                        "trialing",
                        "unpaid"
                      ],
                      "example": "active"
                    },
                    "customer": {
                      "type": "string",
                      "description": "Stripe customer ID",
                      "example": "cus_1234567890abcdef"
                    },
                    "cancel_at_period_end": {
                      "type": "boolean",
                      "description": "Whether subscription will cancel at period end",
                      "example": false
                    },
                    "current_period_start": {
                      "type": "integer",
                      "description": "Unix timestamp of current period start",
                      "example": 1640995200
                    },
                    "current_period_end": {
                      "type": "integer",
                      "description": "Unix timestamp of current period end",
                      "example": 1643673600
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Updated subscription metadata",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "user_123abc"
                        }
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "status",
                    "customer",
                    "cancel_at_period_end",
                    "current_period_start",
                    "current_period_end"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to update subscription"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Cancel subscription",
        "description": "Cancels a Stripe subscription either immediately or at the end of the current billing period. Provides flexible cancellation options.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscriptionId": {
                    "type": "string",
                    "description": "Stripe subscription ID to cancel",
                    "example": "sub_1234567890abcdef"
                  },
                  "cancelAtPeriodEnd": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to cancel at period end (true) or immediately (false)",
                    "example": true
                  }
                },
                "required": [
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Stripe subscription ID",
                      "example": "sub_1234567890abcdef"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "canceled"
                      ],
                      "example": "active"
                    },
                    "cancel_at_period_end": {
                      "type": "boolean",
                      "description": "Whether subscription will cancel at period end",
                      "example": true
                    },
                    "canceled_at": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Unix timestamp when subscription was cancelled",
                      "example": 1640995200
                    },
                    "current_period_end": {
                      "type": "integer",
                      "description": "Unix timestamp of current period end",
                      "example": 1643673600
                    }
                  },
                  "required": [
                    "id",
                    "status",
                    "cancel_at_period_end",
                    "current_period_end"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to cancel subscription"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/subscriptions": {
      "get": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Get user subscriptions",
        "description": "Retrieves subscriptions for the authenticated user with optional filtering for active subscriptions only or including subscription history. Returns comprehensive subscription data with plan information and usage limits.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Return only active subscription",
            "example": true
          },
          {
            "name": "history",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Include subscription history",
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Active subscription only",
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "nullable": true,
                          "description": "Active subscription data",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "sub_1234567890abcdef"
                            },
                            "userId": {
                              "type": "string",
                              "example": "user_123abc"
                            },
                            "planId": {
                              "type": "string",
                              "example": "pro_plan"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "active",
                                "canceled",
                                "incomplete",
                                "incomplete_expired",
                                "past_due",
                                "trialing",
                                "unpaid"
                              ],
                              "example": "active"
                            },
                            "currentPeriodStart": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-01-01T00:00:00.000Z"
                            },
                            "currentPeriodEnd": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-02-01T00:00:00.000Z"
                            }
                          }
                        },
                        "plan": {
                          "type": "string",
                          "nullable": true,
                          "description": "Plan display name",
                          "example": "Pro Plan"
                        },
                        "limits": {
                          "type": "object",
                          "nullable": true,
                          "description": "Plan usage limits",
                          "properties": {
                            "projects": {
                              "type": "integer",
                              "example": 10
                            },
                            "storage": {
                              "type": "string",
                              "example": "100GB"
                            },
                            "users": {
                              "type": "integer",
                              "example": 5
                            }
                          }
                        }
                      },
                      "required": [
                        "data",
                        "plan",
                        "limits"
                      ]
                    },
                    {
                      "title": "All subscriptions",
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "All user subscriptions",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "sub_1234567890abcdef"
                              },
                              "userId": {
                                "type": "string",
                                "example": "user_123abc"
                              },
                              "planId": {
                                "type": "string",
                                "example": "pro_plan"
                              },
                              "status": {
                                "type": "string",
                                "example": "active"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2024-01-01T00:00:00.000Z"
                              }
                            }
                          }
                        },
                        "history": {
                          "type": "array",
                          "nullable": true,
                          "description": "Subscription history (if requested)",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "hist_123"
                              },
                              "action": {
                                "type": "string",
                                "example": "created"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2024-01-01T00:00:00.000Z"
                              }
                            }
                          }
                        },
                        "meta": {
                          "type": "object",
                          "description": "Subscription metadata",
                          "properties": {
                            "total": {
                              "type": "integer",
                              "description": "Total number of subscriptions",
                              "example": 2
                            },
                            "hasActive": {
                              "type": "boolean",
                              "description": "Whether user has active subscription",
                              "example": true
                            },
                            "currentPlan": {
                              "type": "string",
                              "nullable": true,
                              "description": "Current plan name",
                              "example": "pro_plan"
                            }
                          },
                          "required": [
                            "total",
                            "hasActive",
                            "currentPlan"
                          ]
                        }
                      },
                      "required": [
                        "data",
                        "meta"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stripe - Subscriptions"
        ],
        "summary": "Create subscription",
        "description": "Creates a new subscription record for the authenticated user. Validates required fields and ensures user doesn't already have an active subscription. Links subscription to payment provider and includes comprehensive metadata tracking.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "planId": {
                    "type": "string",
                    "description": "Plan identifier",
                    "example": "pro_plan"
                  },
                  "paymentProvider": {
                    "type": "string",
                    "enum": [
                      "stripe",
                      "lemonsqueezy"
                    ],
                    "description": "Payment provider name",
                    "example": "stripe"
                  },
                  "subscriptionId": {
                    "type": "string",
                    "description": "Provider subscription ID",
                    "example": "sub_1234567890abcdef"
                  },
                  "priceId": {
                    "type": "string",
                    "description": "Provider price ID",
                    "example": "price_1234567890abcdef"
                  },
                  "customerId": {
                    "type": "string",
                    "description": "Provider customer ID",
                    "example": "cus_1234567890abcdef"
                  },
                  "currency": {
                    "type": "string",
                    "default": "usd",
                    "description": "Subscription currency",
                    "example": "usd"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Subscription amount in cents",
                    "example": 2999
                  },
                  "interval": {
                    "type": "string",
                    "enum": [
                      "day",
                      "week",
                      "month",
                      "year"
                    ],
                    "description": "Billing interval",
                    "example": "month"
                  },
                  "intervalCount": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1,
                    "description": "Interval count",
                    "example": 1
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Subscription start date",
                    "example": "2024-01-01T00:00:00.000Z"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Subscription end date",
                    "example": "2024-02-01T00:00:00.000Z"
                  },
                  "trialStart": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Trial start date",
                    "example": "2024-01-01T00:00:00.000Z"
                  },
                  "trialEnd": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Trial end date",
                    "example": "2024-01-15T00:00:00.000Z"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional subscription metadata",
                    "additionalProperties": true
                  }
                },
                "required": [
                  "planId",
                  "paymentProvider",
                  "subscriptionId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "Created subscription data",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "sub_internal_123"
                        },
                        "userId": {
                          "type": "string",
                          "example": "user_123abc"
                        },
                        "planId": {
                          "type": "string",
                          "example": "pro_plan"
                        },
                        "paymentProvider": {
                          "type": "string",
                          "example": "stripe"
                        },
                        "subscriptionId": {
                          "type": "string",
                          "example": "sub_1234567890abcdef"
                        },
                        "status": {
                          "type": "string",
                          "example": "active"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T00:00:00.000Z"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Subscription created successfully"
                    }
                  },
                  "required": [
                    "data",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing required fields: planId, paymentProvider, subscriptionId"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - User already has active subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "User already has an active subscription"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/webhook": {
      "post": {
        "tags": [
          "Stripe - Webhooks"
        ],
        "summary": "Handle Stripe webhooks",
        "description": "Processes incoming Stripe webhook events including subscription lifecycle, payment events, and billing portal updates. Automatically handles email notifications, subscription management, and database updates. Requires valid Stripe signature for security.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Stripe webhook event payload",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Stripe event ID",
                    "example": "evt_1234567890abcdef"
                  },
                  "type": {
                    "type": "string",
                    "description": "Webhook event type",
                    "enum": [
                      "customer.subscription.created",
                      "customer.subscription.updated",
                      "customer.subscription.deleted",
                      "invoice.payment_succeeded",
                      "invoice.payment_failed",
                      "payment_intent.succeeded",
                      "payment_intent.payment_failed",
                      "customer.subscription.trial_will_end",
                      "billing_portal.session.updated"
                    ],
                    "example": "customer.subscription.created"
                  },
                  "data": {
                    "type": "object",
                    "description": "Event data object",
                    "properties": {
                      "object": {
                        "type": "object",
                        "description": "The Stripe object (subscription, payment_intent, etc.)"
                      }
                    }
                  },
                  "created": {
                    "type": "integer",
                    "description": "Unix timestamp of event creation",
                    "example": 1640995200
                  },
                  "livemode": {
                    "type": "boolean",
                    "description": "Whether event is from live mode",
                    "example": false
                  }
                },
                "required": [
                  "id",
                  "type",
                  "data",
                  "created",
                  "livemode"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stripe-signature",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Stripe webhook signature for verification",
            "example": "t=1640995200,v1=abc123def456..."
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "received": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "received"
                  ]
                },
                "example": {
                  "received": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid signature or webhook processing failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "no_signature": "No signature provided",
                        "not_processed": "Webhook not processed",
                        "processing_failed": "Webhook processing failed"
                      }
                    }
                  }
                },
                "examples": {
                  "no_signature": {
                    "summary": "Missing signature",
                    "value": {
                      "error": "No signature provided"
                    }
                  },
                  "not_processed": {
                    "summary": "Webhook not processed",
                    "value": {
                      "error": "Webhook not processed"
                    }
                  },
                  "processing_failed": {
                    "summary": "Processing failed",
                    "value": {
                      "error": "Webhook processing failed"
                    }
                  }
                }
              }
            }
          }
        },
        "x-webhook-events": {
          "description": "Supported webhook events and their actions",
          "events": {
            "customer.subscription.created": {
              "description": "Creates subscription record and sends welcome email",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "customer.subscription.updated": {
              "description": "Updates subscription record and sends update email",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "customer.subscription.deleted": {
              "description": "Marks subscription as cancelled and sends cancellation email",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "invoice.payment_succeeded": {
              "description": "Records successful payment and sends receipt email",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "invoice.payment_failed": {
              "description": "Records failed payment and sends retry email",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "payment_intent.succeeded": {
              "description": "Records successful one-time payment and sends confirmation",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "payment_intent.payment_failed": {
              "description": "Records failed payment and sends failure notification",
              "actions": [
                "database_update",
                "email_notification"
              ]
            },
            "customer.subscription.trial_will_end": {
              "description": "Sends trial ending notification email",
              "actions": [
                "email_notification"
              ]
            },
            "billing_portal.session.updated": {
              "description": "Logs billing portal session updates",
              "actions": [
                "logging"
              ]
            }
          }
        },
        "x-email-notifications": {
          "description": "Email notifications sent for different events",
          "templates": {
            "welcome": "Sent when subscription is created",
            "update": "Sent when subscription is updated",
            "cancellation": "Sent when subscription is cancelled",
            "payment_success": "Sent when payment succeeds",
            "payment_failed": "Sent when payment fails",
            "trial_ending": "Sent when trial is about to end"
          }
        }
      }
    },
    "/api/user/payments": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user payment history",
        "description": "Retrieves comprehensive payment history for the authenticated user from Stripe, including invoices, subscription details, and billing information. Returns detailed payment records with plan information and invoice links.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Payment history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Stripe invoice ID",
                        "example": "in_1234567890abcdef"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Payment date in ISO format",
                        "example": "2024-01-15T10:30:00.000Z"
                      },
                      "amount": {
                        "type": "number",
                        "description": "Payment amount (in major currency units)",
                        "example": 29.99
                      },
                      "currency": {
                        "type": "string",
                        "description": "Currency code (uppercase)",
                        "example": "USD"
                      },
                      "plan": {
                        "type": "string",
                        "description": "Plan name",
                        "example": "Premium Plan"
                      },
                      "planId": {
                        "type": "string",
                        "description": "Plan identifier",
                        "example": "pro"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "Paid",
                          "Pending",
                          "Draft",
                          "Unknown"
                        ],
                        "description": "Payment status",
                        "example": "Paid"
                      },
                      "billingInterval": {
                        "type": "string",
                        "enum": [
                          "monthly",
                          "yearly",
                          "weekly",
                          "daily"
                        ],
                        "description": "Billing frequency",
                        "example": "monthly"
                      },
                      "paymentProvider": {
                        "type": "string",
                        "enum": [
                          "stripe"
                        ],
                        "description": "Payment provider",
                        "example": "stripe"
                      },
                      "subscriptionId": {
                        "type": "string",
                        "nullable": true,
                        "description": "Associated subscription ID (empty string if no subscription)",
                        "example": "sub_1234567890abcdef"
                      },
                      "description": {
                        "type": "string",
                        "description": "Payment description",
                        "example": "Premium Plan - monthly billing"
                      },
                      "invoiceUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Hosted invoice URL",
                        "example": "https://invoice.stripe.com/i/acct_123/test_abc"
                      },
                      "invoicePdf": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "Invoice PDF URL",
                        "example": "https://pay.stripe.com/invoice/acct_123/test_abc/pdf"
                      },
                      "invoiceNumber": {
                        "type": "string",
                        "nullable": true,
                        "description": "Invoice number",
                        "example": "INV-2024-001"
                      },
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Billing period end date",
                        "example": "2024-02-15T10:30:00.000Z"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Billing period start date",
                        "example": "2024-01-15T10:30:00.000Z"
                      }
                    },
                    "required": [
                      "id",
                      "date",
                      "amount",
                      "currency",
                      "plan",
                      "status",
                      "billingInterval",
                      "paymentProvider",
                      "description"
                    ]
                  }
                },
                "examples": {
                  "with_payments": {
                    "summary": "User with payment history",
                    "value": [
                      {
                        "id": "in_1234567890abcdef",
                        "date": "2024-01-15T10:30:00.000Z",
                        "amount": 29.99,
                        "currency": "USD",
                        "plan": "Premium Plan",
                        "planId": "pro",
                        "status": "Paid",
                        "billingInterval": "monthly",
                        "paymentProvider": "stripe",
                        "subscriptionId": "sub_1234567890abcdef",
                        "description": "Premium Plan - monthly billing",
                        "invoiceUrl": "https://invoice.stripe.com/i/acct_123/test_abc",
                        "invoicePdf": "https://pay.stripe.com/invoice/acct_123/test_abc/pdf",
                        "invoiceNumber": "INV-2024-001",
                        "period_end": "2024-02-15T10:30:00.000Z",
                        "period_start": "2024-01-15T10:30:00.000Z"
                      },
                      {
                        "id": "in_0987654321fedcba",
                        "date": "2023-12-15T10:30:00.000Z",
                        "amount": 29.99,
                        "currency": "USD",
                        "plan": "Premium Plan",
                        "planId": "pro",
                        "status": "Paid",
                        "billingInterval": "monthly",
                        "paymentProvider": "stripe",
                        "subscriptionId": "sub_1234567890abcdef",
                        "description": "Premium Plan - monthly billing",
                        "invoiceUrl": "https://invoice.stripe.com/i/acct_123/test_def",
                        "invoicePdf": "https://pay.stripe.com/invoice/acct_123/test_def/pdf",
                        "invoiceNumber": "INV-2023-012",
                        "period_end": "2024-01-15T10:30:00.000Z",
                        "period_start": "2023-12-15T10:30:00.000Z"
                      }
                    ]
                  },
                  "empty_history": {
                    "summary": "User with no payment history",
                    "value": []
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch payment data"
                    }
                  }
                }
              }
            }
          }
        },
        "x-data-sources": {
          "description": "Data sources and processing",
          "sources": [
            "Stripe Invoices API",
            "Stripe Subscriptions API"
          ],
          "processing": [
            "Filters paid and open invoices only",
            "Enriches with subscription metadata",
            "Sorts by date (newest first)",
            "Converts amounts from cents to major units",
            "Provides invoice URLs and PDF links"
          ]
        }
      }
    },
    "/api/user/subscription": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user subscription status",
        "description": "Retrieves comprehensive subscription information for the authenticated user from Stripe, including current active subscription details and complete subscription history. Provides detailed billing and plan information.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hasActiveSubscription": {
                      "type": "boolean",
                      "description": "Whether user has an active subscription",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Status message (only when no customer found)",
                      "example": "No Stripe customer found"
                    },
                    "currentSubscription": {
                      "type": "object",
                      "nullable": true,
                      "description": "Current active subscription details",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Stripe subscription ID",
                          "example": "sub_1234567890abcdef"
                        },
                        "planId": {
                          "type": "string",
                          "description": "Stripe price ID",
                          "example": "price_1234567890abcdef"
                        },
                        "planName": {
                          "type": "string",
                          "description": "Plan display name",
                          "example": "Premium Plan"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "trialing",
                            "past_due",
                            "canceled",
                            "unpaid"
                          ],
                          "description": "Subscription status",
                          "example": "active"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Subscription start date",
                          "example": "2024-01-15T10:30:00.000Z"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Current period end date",
                          "example": "2024-02-15T10:30:00.000Z"
                        },
                        "nextBillingDate": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Next billing date",
                          "example": "2024-02-15T10:30:00.000Z"
                        },
                        "paymentProvider": {
                          "type": "string",
                          "enum": [
                            "stripe"
                          ],
                          "description": "Payment provider",
                          "example": "stripe"
                        },
                        "subscriptionId": {
                          "type": "string",
                          "description": "Subscription identifier",
                          "example": "sub_1234567890abcdef"
                        },
                        "amount": {
                          "type": "number",
                          "description": "Subscription amount (in major currency units)",
                          "example": 29.99
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency code (uppercase)",
                          "example": "USD"
                        },
                        "billingInterval": {
                          "type": "string",
                          "enum": [
                            "monthly",
                            "yearly",
                            "weekly",
                            "daily"
                          ],
                          "description": "Billing frequency",
                          "example": "monthly"
                        },
                        "items": {
                          "type": "object",
                          "description": "Stripe subscription item details"
                        },
                        "currentPeriodEnd": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Current period end date",
                          "example": "2024-02-15T10:30:00.000Z"
                        },
                        "currentPeriodStart": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Current period start date",
                          "example": "2024-01-15T10:30:00.000Z"
                        }
                      },
                      "required": [
                        "id",
                        "planId",
                        "planName",
                        "status",
                        "startDate",
                        "paymentProvider",
                        "subscriptionId",
                        "amount",
                        "currency",
                        "billingInterval"
                      ]
                    },
                    "subscriptionHistory": {
                      "type": "array",
                      "description": "Complete subscription history",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Stripe subscription ID",
                            "example": "sub_1234567890abcdef"
                          },
                          "planId": {
                            "type": "string",
                            "description": "Stripe price ID",
                            "example": "price_1234567890abcdef"
                          },
                          "planName": {
                            "type": "string",
                            "description": "Plan display name",
                            "example": "Premium Plan"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "active",
                              "trialing",
                              "past_due",
                              "canceled",
                              "unpaid",
                              "incomplete"
                            ],
                            "description": "Subscription status",
                            "example": "active"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Subscription start date",
                            "example": "2024-01-15T10:30:00.000Z"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Subscription end date",
                            "example": "2024-02-15T10:30:00.000Z"
                          },
                          "cancelledAt": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "description": "Cancellation date (if cancelled)",
                            "example": "2024-01-20T15:45:00.000Z"
                          },
                          "cancelReason": {
                            "type": "string",
                            "nullable": true,
                            "description": "Cancellation reason",
                            "example": "user_requested"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Subscription amount (in major currency units)",
                            "example": 29.99
                          },
                          "currency": {
                            "type": "string",
                            "description": "Currency code (uppercase)",
                            "example": "USD"
                          },
                          "billingInterval": {
                            "type": "string",
                            "enum": [
                              "monthly",
                              "yearly",
                              "weekly",
                              "daily"
                            ],
                            "description": "Billing frequency",
                            "example": "monthly"
                          }
                        },
                        "required": [
                          "id",
                          "planId",
                          "planName",
                          "status",
                          "startDate",
                          "amount",
                          "currency",
                          "billingInterval"
                        ]
                      }
                    }
                  },
                  "required": [
                    "hasActiveSubscription",
                    "subscriptionHistory"
                  ]
                },
                "examples": {
                  "active_subscription": {
                    "summary": "User with active subscription",
                    "value": {
                      "hasActiveSubscription": true,
                      "currentSubscription": {
                        "id": "sub_1234567890abcdef",
                        "planId": "price_1234567890abcdef",
                        "planName": "Premium Plan",
                        "status": "active",
                        "startDate": "2024-01-15T10:30:00.000Z",
                        "endDate": "2024-02-15T10:30:00.000Z",
                        "nextBillingDate": "2024-02-15T10:30:00.000Z",
                        "paymentProvider": "stripe",
                        "subscriptionId": "sub_1234567890abcdef",
                        "amount": 29.99,
                        "currency": "USD",
                        "billingInterval": "monthly",
                        "currentPeriodEnd": "2024-02-15T10:30:00.000Z",
                        "currentPeriodStart": "2024-01-15T10:30:00.000Z"
                      },
                      "subscriptionHistory": [
                        {
                          "id": "sub_1234567890abcdef",
                          "planId": "price_1234567890abcdef",
                          "planName": "Premium Plan",
                          "status": "active",
                          "startDate": "2024-01-15T10:30:00.000Z",
                          "endDate": "2024-02-15T10:30:00.000Z",
                          "amount": 29.99,
                          "currency": "USD",
                          "billingInterval": "monthly"
                        }
                      ]
                    }
                  },
                  "no_active_subscription": {
                    "summary": "User without active subscription",
                    "value": {
                      "hasActiveSubscription": false,
                      "subscriptionHistory": [
                        {
                          "id": "sub_0987654321fedcba",
                          "planId": "price_0987654321fedcba",
                          "planName": "Basic Plan",
                          "status": "canceled",
                          "startDate": "2023-12-01T10:30:00.000Z",
                          "endDate": "2024-01-01T10:30:00.000Z",
                          "cancelledAt": "2023-12-20T15:45:00.000Z",
                          "cancelReason": "user_requested",
                          "amount": 19.99,
                          "currency": "USD",
                          "billingInterval": "monthly"
                        }
                      ]
                    }
                  },
                  "no_customer": {
                    "summary": "User with no Stripe customer",
                    "value": {
                      "hasActiveSubscription": false,
                      "message": "No Stripe customer found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "stripe_error": "Failed to fetch subscription data from Stripe",
                        "general_error": "Failed to fetch subscription data"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-data-sources": {
          "description": "Data sources and processing",
          "sources": [
            "Stripe Subscriptions API",
            "Stripe Payment Methods API (expanded)"
          ],
          "processing": [
            "Identifies active/trialing subscriptions",
            "Enriches with subscription metadata",
            "Converts amounts from cents to major units",
            "Provides complete subscription history",
            "Includes cancellation details when available"
          ]
        }
      }
    },
    "/api/verify-recaptcha": {
      "post": {
        "tags": [
          "Security - ReCAPTCHA"
        ],
        "summary": "Verify ReCAPTCHA token",
        "description": "Verifies a Google ReCAPTCHA token by communicating with Google's verification API. Supports both development mode (bypasses verification) and production mode with comprehensive error handling and score reporting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "ReCAPTCHA token from client-side verification",
                    "example": "03AGdBq25SiXT-pmSeBXjzScW-EiocHwwpwqJRCAC7g..."
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ReCAPTCHA verification completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Whether the ReCAPTCHA verification was successful",
                      "example": true
                    },
                    "score": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "ReCAPTCHA v3 score (0.0 = bot, 1.0 = human)",
                      "example": 0.9
                    },
                    "action": {
                      "type": "string",
                      "description": "Action name from ReCAPTCHA verification",
                      "example": "submit"
                    },
                    "hostname": {
                      "type": "string",
                      "description": "Hostname where verification occurred",
                      "example": "example.com"
                    },
                    "challenge_ts": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the challenge",
                      "example": "2024-01-15T10:30:00Z"
                    },
                    "error_codes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Error codes from Google ReCAPTCHA API",
                      "example": []
                    }
                  },
                  "required": [
                    "success"
                  ]
                },
                "examples": {
                  "successful_verification": {
                    "summary": "Successful ReCAPTCHA verification",
                    "value": {
                      "success": true,
                      "score": 0.9,
                      "action": "submit",
                      "hostname": "example.com",
                      "challenge_ts": "2024-01-15T10:30:00Z",
                      "error_codes": []
                    }
                  },
                  "failed_verification": {
                    "summary": "Failed ReCAPTCHA verification",
                    "value": {
                      "success": false,
                      "score": 0.1,
                      "action": "submit",
                      "hostname": "example.com",
                      "challenge_ts": "2024-01-15T10:30:00Z",
                      "error_codes": [
                        "invalid-input-response"
                      ]
                    }
                  },
                  "development_mode": {
                    "summary": "Development mode bypass",
                    "value": {
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "ReCAPTCHA token is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Verification failed"
                    }
                  }
                },
                "examples": {
                  "not_configured": {
                    "summary": "Missing secret key",
                    "value": {
                      "success": false,
                      "error": "ReCAPTCHA not configured"
                    }
                  },
                  "verification_failed": {
                    "summary": "Upstream verification failure",
                    "value": {
                      "success": false,
                      "error": "Failed to verify ReCAPTCHA"
                    }
                  },
                  "general_error": {
                    "summary": "Unexpected runtime error",
                    "value": {
                      "success": false,
                      "error": "Verification failed"
                    }
                  }
                }
              }
            }
          }
        },
        "x-development-mode": {
          "description": "Development mode behavior",
          "behavior": "When RECAPTCHA_SECRET_KEY is not configured in development, returns success: true without verification"
        },
        "x-google-api": {
          "description": "Google ReCAPTCHA API integration",
          "endpoint": "https://www.google.com/recaptcha/api/siteverify",
          "method": "POST",
          "format": "application/x-www-form-urlencoded"
        }
      }
    },
    "/api/version": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get application version information",
        "description": "Retrieves comprehensive version information from the Git repository, including latest commit details, author information, and synchronization status. Automatically syncs repository before retrieving information.",
        "responses": {
          "200": {
            "description": "Version information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commit": {
                      "type": "string",
                      "description": "Short commit hash (7 characters)",
                      "example": "a1b2c3d"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Commit date in ISO format",
                      "example": "2024-01-15T10:30:00.000Z"
                    },
                    "message": {
                      "type": "string",
                      "description": "Commit message",
                      "example": "✨ Add new feature for user management"
                    },
                    "author": {
                      "type": "string",
                      "description": "Commit author name",
                      "example": "John Doe"
                    },
                    "repository": {
                      "type": "string",
                      "description": "Repository URL or identifier",
                      "example": "https://github.com/user/repo.git"
                    },
                    "lastSync": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last synchronization timestamp",
                      "example": "2024-01-15T10:35:00.000Z"
                    },
                    "branch": {
                      "type": "string",
                      "description": "Current Git branch",
                      "example": "main"
                    }
                  },
                  "required": [
                    "commit",
                    "date",
                    "message",
                    "author",
                    "repository",
                    "lastSync"
                  ]
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Caching policy",
                "schema": {
                  "type": "string",
                  "example": "public, max-age=60, stale-while-revalidate=300"
                }
              },
              "ETag": {
                "description": "Entity tag for caching",
                "schema": {
                  "type": "string",
                  "example": "\"a1b2c3d-1705312200000\""
                }
              },
              "Last-Modified": {
                "description": "Last modification date",
                "schema": {
                  "type": "string",
                  "example": "Mon, 15 Jan 2024 10:30:00 GMT"
                }
              }
            }
          },
          "404": {
            "description": "Repository or commits not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "repo_not_found": "Data repository not found",
                        "no_commits": "No commits found in repository"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "REPOSITORY_NOT_FOUND",
                        "NO_COMMITS"
                      ],
                      "example": "REPOSITORY_NOT_FOUND"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-15T10:35:00.000Z"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional error details",
                      "example": "Git directory not found at: /path/to/content/.git"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "examples": {
                        "git_error": "Failed to retrieve commit information",
                        "validation_error": "Invalid commit data",
                        "internal_error": "Internal server error"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "GIT_ERROR",
                        "VALIDATION_ERROR",
                        "INTERNAL_ERROR"
                      ],
                      "example": "GIT_ERROR"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-15T10:35:00.000Z"
                    },
                    "details": {
                      "type": "string",
                      "description": "Additional error details",
                      "example": "Commit is missing required fields"
                    }
                  }
                }
              }
            }
          }
        },
        "x-caching": {
          "description": "Caching behavior",
          "client": "1 minute with stale-while-revalidate for 5 minutes",
          "etag": "Based on commit hash and timestamp",
          "headers": "Includes Last-Modified header"
        },
        "x-performance": {
          "description": "Performance considerations",
          "sync": "Automatic repository sync before version retrieval",
          "logging": "Request duration logging",
          "timeout": "Graceful handling of sync timeouts"
        },
        "x-environment": {
          "description": "Environment variables",
          "required": [
            "DATA_REPOSITORY: Git repository URL or path"
          ],
          "optional": [
            "Content path configuration"
          ]
        }
      }
    },
    "/api/version/sync": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Trigger manual repository synchronization",
        "description": "Manually triggers a background synchronization of the Git repository. Prevents concurrent sync operations and provides detailed status information including duration and success metrics.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "options": {
                    "type": "object",
                    "description": "Optional sync configuration (reserved for future use)",
                    "additionalProperties": true
                  }
                },
                "example": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sync operation completed or was already in progress",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Successful Sync",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Operation completion timestamp",
                          "example": "2024-01-15T10:35:00.000Z"
                        },
                        "duration": {
                          "type": "number",
                          "description": "Operation duration in milliseconds",
                          "example": 1250
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message",
                          "example": "Repository synchronized successfully"
                        },
                        "details": {
                          "type": "string",
                          "description": "Additional operation details",
                          "example": "Updated 5 files, 3 commits ahead"
                        }
                      },
                      "required": [
                        "success",
                        "timestamp",
                        "duration",
                        "message"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Sync Already in Progress",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-15T10:35:00.000Z"
                        },
                        "duration": {
                          "type": "number",
                          "example": 50
                        },
                        "message": {
                          "type": "string",
                          "example": "Sync was already in progress"
                        },
                        "details": {
                          "type": "string",
                          "example": "Another sync operation is currently running"
                        }
                      },
                      "required": [
                        "success",
                        "timestamp",
                        "duration",
                        "message"
                      ]
                    }
                  ]
                },
                "examples": {
                  "successful_sync": {
                    "summary": "Successful repository sync",
                    "value": {
                      "success": true,
                      "timestamp": "2024-01-15T10:35:00.000Z",
                      "duration": 1250,
                      "message": "Repository synchronized successfully",
                      "details": "Updated 5 files, 3 commits ahead"
                    }
                  },
                  "already_in_progress": {
                    "summary": "Sync already running",
                    "value": {
                      "success": true,
                      "timestamp": "2024-01-15T10:35:00.000Z",
                      "duration": 50,
                      "message": "Sync was already in progress",
                      "details": "Another sync operation is currently running"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Sync operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Manual sync request failed"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-15T10:35:00.000Z"
                    },
                    "duration": {
                      "type": "number",
                      "description": "Operation duration before failure",
                      "example": 800
                    },
                    "details": {
                      "type": "string",
                      "description": "Detailed error information",
                      "example": "Git fetch failed: network timeout"
                    }
                  },
                  "required": [
                    "success",
                    "error",
                    "timestamp",
                    "duration"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get repository synchronization status",
        "description": "Retrieves current synchronization status including progress indicators, last sync time, and system uptime information.",
        "responses": {
          "200": {
            "description": "Sync status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "syncInProgress": {
                      "type": "boolean",
                      "description": "Whether a sync operation is currently running",
                      "example": false
                    },
                    "lastSyncTime": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Timestamp of last successful sync",
                      "example": "2024-01-15T10:30:00.000Z"
                    },
                    "timeSinceLastSync": {
                      "type": "number",
                      "nullable": true,
                      "description": "Milliseconds since last sync",
                      "example": 300000
                    },
                    "timeSinceLastSyncHuman": {
                      "type": "string",
                      "description": "Human-readable time since last sync",
                      "example": "300s ago"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Server uptime in seconds",
                      "example": 86400
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Current server timestamp",
                      "example": "2024-01-15T10:35:00.000Z"
                    }
                  },
                  "required": [
                    "syncInProgress",
                    "timeSinceLastSyncHuman",
                    "uptime",
                    "timestamp"
                  ]
                },
                "examples": {
                  "sync_idle": {
                    "summary": "No sync in progress",
                    "value": {
                      "syncInProgress": false,
                      "lastSyncTime": "2024-01-15T10:30:00.000Z",
                      "timeSinceLastSync": 300000,
                      "timeSinceLastSyncHuman": "300s ago",
                      "uptime": 86400,
                      "timestamp": "2024-01-15T10:35:00.000Z"
                    }
                  },
                  "sync_in_progress": {
                    "summary": "Sync currently running",
                    "value": {
                      "syncInProgress": true,
                      "lastSyncTime": "2024-01-15T10:30:00.000Z",
                      "timeSinceLastSync": 60000,
                      "timeSinceLastSyncHuman": "60s ago",
                      "uptime": 86400,
                      "timestamp": "2024-01-15T10:31:00.000Z"
                    }
                  },
                  "never_synced": {
                    "summary": "Never synchronized",
                    "value": {
                      "syncInProgress": false,
                      "lastSyncTime": null,
                      "timeSinceLastSync": null,
                      "timeSinceLastSyncHuman": "never",
                      "uptime": 3600,
                      "timestamp": "2024-01-15T10:35:00.000Z"
                    }
                  }
                }
              }
            }
          }
        },
        "x-concurrency": {
          "description": "Concurrency handling",
          "behavior": "Prevents multiple simultaneous sync operations",
          "status": "Returns success=true if sync already in progress"
        },
        "x-performance": {
          "description": "Performance monitoring",
          "metrics": "Duration tracking for all operations",
          "logging": "Detailed operation logging"
        }
      }
    },
    "/api/surveys/{surveyId}/analytics": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get survey analytics",
        "description": "Retrieve analytics data for a specific survey (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by item ID"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by start date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by end date"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "surveyId": {
                          "type": "string"
                        },
                        "surveySlug": {
                          "type": "string"
                        },
                        "totalResponses": {
                          "type": "integer"
                        },
                        "lastResponseAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Survey not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/surveys/{surveyId}/responses": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get survey responses",
        "description": "Retrieve responses for a specific survey (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by item ID"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by user ID"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by start date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by end date"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Responses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSurveyResponses"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Surveys"
        ],
        "summary": "Submit survey response",
        "description": "Submit a response to a published survey",
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "surveyId": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "itemId": {
                    "type": "string"
                  },
                  "data": {
                    "type": "object"
                  }
                },
                "required": [
                  "surveyId",
                  "data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/surveys/by-id/{id}": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get survey by ID",
        "description": "Retrieve a specific survey by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Survey retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "404": {
            "description": "Survey not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/surveys/responses/{responseId}": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get survey response by ID",
        "description": "Retrieve a specific survey response (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "responseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Response ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Response retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Response not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/surveys": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get surveys",
        "description": "Retrieve surveys with optional filters",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "global",
                "item"
              ]
            },
            "description": "Filter by survey type"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by item ID"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "published",
                "closed"
              ]
            },
            "description": "Filter by status"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Surveys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "surveys": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "total": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Surveys"
        ],
        "summary": "Create survey",
        "description": "Create a new survey (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "global",
                      "item"
                    ]
                  },
                  "itemId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "published",
                      "closed"
                    ]
                  },
                  "surveyJson": {
                    "type": "object"
                  }
                },
                "required": [
                  "title",
                  "type",
                  "surveyJson"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/surveys/{surveyId}": {
      "get": {
        "tags": [
          "Surveys"
        ],
        "summary": "Get survey by ID or slug",
        "description": "Retrieve a specific survey by its ID or slug",
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID or slug"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Item ID for item-specific surveys"
          }
        ],
        "responses": {
          "200": {
            "description": "Survey retrieved successfully"
          },
          "404": {
            "description": "Survey not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Surveys"
        ],
        "summary": "Update survey",
        "description": "Update a survey by ID or slug (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID or slug"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "published",
                      "closed"
                    ]
                  },
                  "surveyJson": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Survey not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Surveys"
        ],
        "summary": "Delete survey",
        "description": "Delete a survey by ID or slug (admin only)",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "surveyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Survey ID or slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Survey deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Survey not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/admin/categories/all": {
      "get": {
        "tags": [
          "Admin - Categories"
        ],
        "summary": "Get all categories",
        "description": "Returns all categories in the system. Used for category management in admin interfaces. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category ID",
            "example": "productivity"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 15,
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-15T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized. Admin access required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Categories not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Categories not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/tags/all": {
      "get": {
        "tags": [
          "Admin - Tags"
        ],
        "summary": "Get all tags",
        "description": "Retrieves a specific tag by its ID with complete details including usage statistics and metadata. Used for tag editing and detailed view in admin interfaces. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en"
            },
            "description": "Locale for fetching tags",
            "example": "en"
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "productivity",
                    "name": "Productivity",
                    "isActive": true,
                    "itemCount": 156,
                    "created_at": "2024-01-20T10:30:00.000Z",
                    "updated_at": "2024-01-20T10:30:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Tag not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch tag"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/companies": {
      "get": {
        "tags": [
          "Admin - Companies"
        ],
        "summary": "List companies",
        "description": "Returns a paginated list of companies with filtering options. Supports search by name/domain, status filtering. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination",
            "example": 1
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of companies per page",
            "example": 10
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for company name or domain (case-insensitive)",
            "example": "acme"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            },
            "description": "Filter by company status",
            "example": "active"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "companies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Company"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 5
                        },
                        "total": {
                          "type": "integer",
                          "example": 47
                        },
                        "limit": {
                          "type": "integer",
                          "example": 10
                        },
                        "activeCount": {
                          "type": "integer",
                          "example": 40,
                          "description": "Global count of active companies (unfiltered)"
                        },
                        "inactiveCount": {
                          "type": "integer",
                          "example": 7,
                          "description": "Global count of inactive companies (unfiltered)"
                        }
                      },
                      "required": [
                        "page",
                        "totalPages",
                        "total",
                        "limit",
                        "activeCount",
                        "inactiveCount"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "meta"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "companies": [
                      {
                        "id": "550e8400-e29b-41d4-a716-446655440000",
                        "name": "Acme Corporation",
                        "website": "https://acme.com",
                        "domain": "acme.com",
                        "slug": "acme-corporation",
                        "status": "active",
                        "createdAt": "2024-01-15T10:30:00.000Z",
                        "updatedAt": "2024-01-20T14:45:00.000Z"
                      },
                      {
                        "id": "660e8400-e29b-41d4-a716-446655440001",
                        "name": "Beta Industries",
                        "website": "https://beta.io",
                        "domain": "beta.io",
                        "slug": "beta-industries",
                        "status": "active",
                        "createdAt": "2024-01-16T09:15:00.000Z",
                        "updatedAt": "2024-01-20T16:20:00.000Z"
                      }
                    ]
                  },
                  "meta": {
                    "page": 1,
                    "totalPages": 5,
                    "total": 47,
                    "limit": 10,
                    "activeCount": 40,
                    "inactiveCount": 7
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_page": {
                    "value": {
                      "error": "Invalid page parameter. Must be a positive integer."
                    }
                  },
                  "invalid_limit": {
                    "value": {
                      "error": "Invalid limit parameter. Must be between 1 and 100."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch companies"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin - Companies"
        ],
        "summary": "Create company",
        "description": "Creates a new company with validation and conflict handling. Domain and slug are normalized to lowercase. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name (required)",
                    "example": "Acme Corporation",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "description": "Company website URL (optional)",
                    "example": "https://acme.com"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Company domain (optional, normalized to lowercase)",
                    "example": "acme.com",
                    "maxLength": 255
                  },
                  "slug": {
                    "type": "string",
                    "description": "URL-friendly identifier (optional, normalized to lowercase)",
                    "example": "acme-corporation",
                    "pattern": "^[a-z0-9-]+$",
                    "maxLength": 255
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "default": "active",
                    "description": "Company status (optional)",
                    "example": "active"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Acme Corporation",
                "website": "https://acme.com",
                "domain": "acme.com",
                "slug": "acme-corporation",
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Company"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "550e8400-e29b-41d4-a716-446655440000",
                    "name": "Acme Corporation",
                    "website": "https://acme.com",
                    "domain": "acme.com",
                    "slug": "acme-corporation",
                    "status": "active",
                    "createdAt": "2024-01-20T16:45:00.000Z",
                    "updatedAt": "2024-01-20T16:45:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "Validation error",
                  "details": [
                    {
                      "field": "name",
                      "message": "Company name is required"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Domain or slug already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Company with this domain already exists"
                    }
                  }
                },
                "examples": {
                  "domain_conflict": {
                    "value": {
                      "error": "Company with domain 'acme.com' already exists"
                    }
                  },
                  "slug_conflict": {
                    "value": {
                      "error": "Company with slug 'acme-corporation' already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to create company"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/companies/{id}": {
      "get": {
        "tags": [
          "Admin - Companies"
        ],
        "summary": "Get company by ID",
        "description": "Retrieves a specific company by ID. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Company UUID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Company"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "550e8400-e29b-41d4-a716-446655440000",
                    "name": "Acme Corporation",
                    "website": "https://acme.com",
                    "domain": "acme.com",
                    "slug": "acme-corporation",
                    "status": "active",
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-20T14:45:00.000Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Company not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch company"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Admin - Companies"
        ],
        "summary": "Update company",
        "description": "Updates a specific company by ID. Supports partial updates. Domain and slug are normalized to lowercase. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Company UUID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Acme Corporation Updated",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "description": "Company website URL",
                    "example": "https://acme.com"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Company domain (normalized to lowercase)",
                    "example": "acme.com",
                    "maxLength": 255
                  },
                  "slug": {
                    "type": "string",
                    "description": "URL-friendly identifier (normalized to lowercase)",
                    "example": "acme-corporation",
                    "pattern": "^[a-z0-9-]+$",
                    "maxLength": 255
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Company status",
                    "example": "active"
                  }
                }
              },
              "example": {
                "name": "Acme Corporation Updated",
                "website": "https://acme.com",
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Company"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "550e8400-e29b-41d4-a716-446655440000",
                    "name": "Acme Corporation Updated",
                    "website": "https://acme.com",
                    "domain": "acme.com",
                    "slug": "acme-corporation",
                    "status": "active",
                    "createdAt": "2024-01-15T10:30:00.000Z",
                    "updatedAt": "2024-01-20T16:30:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Validation error"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": "Validation error",
                  "details": [
                    {
                      "field": "slug",
                      "message": "Slug must contain only lowercase letters, numbers, and hyphens"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Company not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Domain or slug already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Company with this domain already exists"
                    }
                  }
                },
                "examples": {
                  "domain_conflict": {
                    "value": {
                      "error": "Company with domain 'acme.com' already exists"
                    }
                  },
                  "slug_conflict": {
                    "value": {
                      "error": "Company with slug 'acme-corporation' already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to update company"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Companies"
        ],
        "summary": "Delete company",
        "description": "Permanently deletes a company by ID. This action cannot be undone. Associated item-company links will be removed via CASCADE. Requires admin privileges.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Company UUID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        ],
        "responses": {
          "200": {
            "description": "Company deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Company deleted successfully"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                },
                "example": {
                  "success": true,
                  "message": "Company deleted successfully"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Company not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to delete company"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{slug}/comments/{commentId}": {
      "delete": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Delete comment",
        "description": "Deletes a specific comment. Only the comment author can delete their own comment. The comment is soft-deleted (marked as deleted) rather than permanently removed from the database. Requires user authentication and ownership verification.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug that the comment belongs to",
            "example": "awesome-productivity-tool"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Comment ID to delete",
            "example": "comment_456def"
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted successfully (no content returned)"
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found, client profile not found, or not authorized to delete",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "examples": {
                    "client_not_found": "Client profile not found",
                    "comment_not_found": "Comment not found or not authorized"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{slug}/comments/rating": {
      "get": {
        "tags": [
          "Item Comments"
        ],
        "summary": "Get item rating statistics",
        "description": "Returns aggregated rating statistics for a specific item including average rating and total number of ratings. Only counts non-deleted comments. This is a public endpoint that doesn't require authentication and includes database availability checking.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to get rating statistics for",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Rating statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageRating": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 5,
                      "description": "Average rating (0 if no ratings)",
                      "example": 4.2
                    },
                    "totalRatings": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of ratings",
                      "example": 15
                    }
                  },
                  "required": [
                    "averageRating",
                    "totalRatings"
                  ]
                },
                "examples": {
                  "with_ratings": {
                    "summary": "Item with ratings",
                    "value": {
                      "averageRating": 4.2,
                      "totalRatings": 15
                    }
                  },
                  "no_ratings": {
                    "summary": "Item with no ratings",
                    "value": {
                      "averageRating": 0,
                      "totalRatings": 0
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch ratings"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{slug}/votes/count": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get item vote count",
        "description": "Returns the total vote count for a specific item. The count represents the net score (upvotes - downvotes). This is a public endpoint that doesn't require authentication and is optimized for quick vote count retrieval.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to get vote count for",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Net vote count (upvotes - downvotes)",
                      "example": 15
                    }
                  },
                  "required": [
                    "success",
                    "count"
                  ]
                },
                "examples": {
                  "positive_score": {
                    "summary": "Item with positive score",
                    "value": {
                      "success": true,
                      "count": 15
                    }
                  },
                  "negative_score": {
                    "summary": "Item with negative score",
                    "value": {
                      "success": true,
                      "count": -3
                    }
                  },
                  "zero_score": {
                    "summary": "Item with no votes or equal votes",
                    "value": {
                      "success": true,
                      "count": 0
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch vote count"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{slug}/votes": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get item vote information",
        "description": "Returns the total vote count for an item and the current user's vote status if authenticated. The vote count represents the net score (upvotes - downvotes). User vote status shows whether the user has upvoted, downvoted, or not voted on the item.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to get vote information for",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Net vote count (upvotes - downvotes)",
                      "example": 15
                    },
                    "userVote": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "up",
                        "down",
                        null
                      ],
                      "description": "Current user's vote status (null if not authenticated or no vote)",
                      "example": "up"
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "examples": {
                  "authenticated_upvoted": {
                    "summary": "Authenticated user who upvoted",
                    "value": {
                      "success": true,
                      "count": 15,
                      "userVote": "up"
                    }
                  },
                  "authenticated_downvoted": {
                    "summary": "Authenticated user who downvoted",
                    "value": {
                      "success": true,
                      "count": -3,
                      "userVote": "down"
                    }
                  },
                  "authenticated_no_vote": {
                    "summary": "Authenticated user with no vote",
                    "value": {
                      "success": true,
                      "count": 0,
                      "userVote": null
                    }
                  },
                  "unauthenticated": {
                    "summary": "Unauthenticated user",
                    "value": {
                      "success": true,
                      "count": 20,
                      "userVote": null
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Cast or update vote",
        "description": "Casts a new vote or updates an existing vote for an item. If the user has already voted, the previous vote is replaced with the new one. Supports upvote ('up') and downvote ('down') types. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to vote on",
            "example": "awesome-productivity-tool"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "up",
                      "down"
                    ],
                    "description": "Vote type - 'up' for upvote, 'down' for downvote",
                    "example": "up"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote cast successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Updated net vote count (upvotes - downvotes)",
                      "example": 16
                    },
                    "userVote": {
                      "type": "string",
                      "enum": [
                        "up",
                        "down"
                      ],
                      "description": "User's current vote status",
                      "example": "up"
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "examples": {
                  "upvote_cast": {
                    "summary": "Upvote cast successfully",
                    "value": {
                      "success": true,
                      "count": 16,
                      "userVote": "up"
                    }
                  },
                  "downvote_cast": {
                    "summary": "Downvote cast successfully",
                    "value": {
                      "success": true,
                      "count": 14,
                      "userVote": "down"
                    }
                  },
                  "vote_updated": {
                    "summary": "Previous vote updated",
                    "value": {
                      "success": true,
                      "count": 18,
                      "userVote": "up"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid vote type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid vote type. Must be 'up' or 'down'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Remove user vote",
        "description": "Removes the current user's vote from an item if one exists. This effectively 'unvotes' the item, returning the user to a neutral state. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to remove vote from",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "integer",
                      "description": "Updated net vote count after removal",
                      "example": 14
                    },
                    "userVote": {
                      "type": null,
                      "description": "User vote status (always null after removal)",
                      "example": null
                    }
                  },
                  "required": [
                    "success",
                    "count",
                    "userVote"
                  ]
                },
                "example": {
                  "success": true,
                  "count": 14,
                  "userVote": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/items/{slug}/votes/status": {
      "get": {
        "tags": [
          "Item Votes"
        ],
        "summary": "Get user vote status",
        "description": "Returns the current authenticated user's vote status for a specific item. Returns the complete vote record if the user has voted, or null if no vote exists. Requires user authentication and a valid client profile.",
        "security": [
          {
            "sessionAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Item slug to get vote status for",
            "example": "awesome-productivity-tool"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "User has voted",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Vote record ID",
                          "example": "vote_123abc"
                        },
                        "userId": {
                          "type": "string",
                          "description": "User ID who cast the vote",
                          "example": "client_456def"
                        },
                        "itemId": {
                          "type": "string",
                          "description": "Item ID that was voted on",
                          "example": "item_123abc"
                        },
                        "voteType": {
                          "type": "string",
                          "enum": [
                            "UPVOTE",
                            "DOWNVOTE"
                          ],
                          "description": "Type of vote cast",
                          "example": "UPVOTE"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "When the vote was cast",
                          "example": "2024-01-20T10:30:00.000Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "When the vote was last updated",
                          "example": "2024-01-20T10:30:00.000Z"
                        }
                      }
                    },
                    {
                      "type": "null",
                      "description": "User has not voted"
                    }
                  ]
                },
                "examples": {
                  "upvote_status": {
                    "summary": "User has upvoted",
                    "value": {
                      "id": "vote_123abc",
                      "userId": "client_456def",
                      "itemId": "item_123abc",
                      "voteType": "UPVOTE",
                      "createdAt": "2024-01-20T10:30:00.000Z",
                      "updatedAt": "2024-01-20T10:30:00.000Z"
                    }
                  },
                  "downvote_status": {
                    "summary": "User has downvoted",
                    "value": {
                      "id": "vote_789ghi",
                      "userId": "client_456def",
                      "itemId": "item_123abc",
                      "voteType": "DOWNVOTE",
                      "createdAt": "2024-01-19T15:20:00.000Z",
                      "updatedAt": "2024-01-19T15:20:00.000Z"
                    }
                  },
                  "no_vote": {
                    "summary": "User has not voted",
                    "value": null
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Client profile not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch vote status"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/features": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get feature availability flags",
        "description": "Returns current feature availability based on system configuration. Features depend on database availability. This is a public endpoint that helps the frontend gracefully handle missing features.",
        "responses": {
          "200": {
            "description": "Feature flags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ratings": {
                      "type": "boolean",
                      "description": "Whether ratings feature is available",
                      "example": true
                    },
                    "comments": {
                      "type": "boolean",
                      "description": "Whether comments feature is available",
                      "example": true
                    },
                    "favorites": {
                      "type": "boolean",
                      "description": "Whether favorites feature is available",
                      "example": true
                    },
                    "featuredItems": {
                      "type": "boolean",
                      "description": "Whether featured items feature is available",
                      "example": true
                    }
                  },
                  "required": [
                    "ratings",
                    "comments",
                    "favorites",
                    "featuredItems"
                  ]
                },
                "examples": {
                  "all_enabled": {
                    "summary": "All features enabled (database configured)",
                    "value": {
                      "ratings": true,
                      "comments": true,
                      "favorites": true,
                      "featuredItems": true
                    }
                  },
                  "all_disabled": {
                    "summary": "All features disabled (no database)",
                    "value": {
                      "ratings": false,
                      "comments": false,
                      "favorites": false,
                      "featuredItems": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ClientProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique client profile identifier",
            "example": "client_123abc"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "user_456def"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Client email address",
            "example": "john.doe@example.com"
          },
          "name": {
            "type": "string",
            "description": "Client full name",
            "example": "John Doe"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "description": "Display name for the client",
            "example": "John Doe"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "Unique username",
            "example": "johndoe"
          },
          "bio": {
            "type": "string",
            "nullable": true,
            "description": "Client biography",
            "example": "Software engineer with 5+ years experience"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true,
            "description": "Job title",
            "example": "Senior Software Engineer"
          },
          "company": {
            "type": "string",
            "nullable": true,
            "description": "Company name",
            "example": "Tech Corp Inc"
          },
          "industry": {
            "type": "string",
            "nullable": true,
            "description": "Industry sector",
            "example": "Technology"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Phone number",
            "example": "+1-555-123-4567"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Personal or company website",
            "example": "https://johndoe.com"
          },
          "location": {
            "type": "string",
            "nullable": true,
            "description": "Geographic location",
            "example": "San Francisco, CA"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Avatar image URL",
            "example": "https://example.com/avatars/johndoe.jpg"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "individual",
              "business",
              "enterprise"
            ],
            "description": "Type of account",
            "example": "business"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended",
              "trial"
            ],
            "description": "Account status",
            "example": "active"
          },
          "plan": {
            "type": "string",
            "enum": [
              "free",
              "standard",
              "premium"
            ],
            "description": "Subscription plan",
            "example": "premium"
          },
          "timezone": {
            "type": "string",
            "description": "Client timezone",
            "example": "America/New_York"
          },
          "language": {
            "type": "string",
            "description": "Preferred language",
            "example": "en"
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Whether two-factor authentication is enabled",
            "example": true
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether email is verified",
            "example": true
          },
          "totalSubmissions": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of submissions",
            "example": 25
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Admin notes about the client",
            "example": "VIP client, priority support"
          },
          "tags": {
            "type": "string",
            "nullable": true,
            "description": "Client tags (comma-separated)",
            "example": "vip,enterprise,priority"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile creation timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Profile last update timestamp",
            "example": "2024-01-20T14:45:00.000Z"
          },
          "accountProvider": {
            "type": "string",
            "description": "Authentication provider",
            "example": "google"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the account is currently active",
            "example": true
          },
          "lastActiveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last activity timestamp",
            "example": "2024-01-20T14:45:00.000Z"
          }
        },
        "required": [
          "id",
          "userId",
          "email",
          "name",
          "accountType",
          "status",
          "plan",
          "timezone",
          "language",
          "twoFactorEnabled",
          "emailVerified",
          "totalSubmissions",
          "createdAt",
          "updatedAt",
          "accountProvider",
          "isActive"
        ]
      },
      "Company": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique company identifier (UUID)",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Acme Corporation"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "Company website URL",
            "example": "https://acme.com"
          },
          "domain": {
            "type": "string",
            "nullable": true,
            "description": "Company domain (normalized, without www.)",
            "example": "acme.com"
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "description": "URL-friendly company identifier",
            "example": "acme-corporation"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "description": "Company status",
            "example": "active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Company creation timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-20T14:45:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "Survey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique survey identifier",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly survey identifier",
            "example": "customer-satisfaction-2024"
          },
          "title": {
            "type": "string",
            "description": "Survey title",
            "example": "Customer Satisfaction Survey"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Survey description",
            "example": "Help us improve our services"
          },
          "type": {
            "type": "string",
            "enum": ["global", "item"],
            "description": "Survey type - global or item-specific",
            "example": "global"
          },
          "itemId": {
            "type": "string",
            "nullable": true,
            "description": "Associated item ID for item-specific surveys",
            "example": "item-123"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "published", "closed"],
            "description": "Survey status",
            "example": "published"
          },
          "surveyJson": {
            "type": "object",
            "description": "SurveyJS JSON definition containing questions and configuration",
            "example": {
              "pages": [{
                "elements": [{
                  "type": "text",
                  "name": "question1",
                  "title": "What is your name?"
                }]
              }]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Survey creation timestamp",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-20T14:45:00.000Z"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Survey publication timestamp",
            "example": "2024-01-16T09:00:00.000Z"
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Survey closure timestamp",
            "example": null
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Soft deletion timestamp",
            "example": null
          }
        },
        "required": [
          "id",
          "slug",
          "title",
          "type",
          "status",
          "surveyJson",
          "createdAt",
          "updatedAt"
        ]
      },
      "SurveyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique response identifier",
            "example": "660e8400-e29b-41d4-a716-446655440000"
          },
          "surveyId": {
            "type": "string",
            "format": "uuid",
            "description": "Survey identifier",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "userId": {
            "type": "string",
            "nullable": true,
            "description": "User ID if authenticated",
            "example": "user-123"
          },
          "itemId": {
            "type": "string",
            "nullable": true,
            "description": "Associated item ID for item-specific surveys",
            "example": "item-123"
          },
          "data": {
            "type": "object",
            "description": "Survey response data containing answers to all questions",
            "example": {
              "question1": "John Doe",
              "question2": 5,
              "question3": ["option1", "option2"]
            }
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Response completion timestamp",
            "example": "2024-01-18T15:30:00.000Z"
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "description": "Respondent IP address",
            "example": "192.168.1.1"
          },
          "userAgent": {
            "type": "string",
            "nullable": true,
            "description": "Respondent user agent string",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Response creation timestamp",
            "example": "2024-01-18T15:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-18T15:30:00.000Z"
          }
        },
        "required": [
          "id",
          "surveyId",
          "data",
          "completedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginatedSurveyResponses": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyResponse"
            },
            "description": "Array of survey responses"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Current page number",
                "example": 1
              },
              "pageSize": {
                "type": "integer",
                "description": "Number of items per page",
                "example": 20
              },
              "total": {
                "type": "integer",
                "description": "Total number of responses",
                "example": 150
              },
              "totalPages": {
                "type": "integer",
                "description": "Total number of pages",
                "example": 8
              }
            },
            "required": ["page", "pageSize", "total", "totalPages"]
          }
        },
        "required": ["items", "pagination"]
      }
    },
    "responses": {},
    "securitySchemes": {}
  },
  "tags": []
}