name: Vercel Deployment
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Vercel Environment to deploy to (e.g., production, staging, preview)"
        required: true
        type: string
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
env:
  DATA_REPOSITORY: "https://github.com/${{ github.repository_owner }}/${{ secrets.DATA_REPOSITORY }}"
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  Deploy-Vercel:
    runs-on: ubuntu-latest
    steps:
      - name: Target environment
        run: echo "Target ${{ inputs.environment }}"
      - uses: actions/checkout@v2

      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "global-cmd=pnpm add --global" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "global-cmd=yarn global add" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "global-cmd=npm install --global" >> $GITHUB_OUTPUT
          fi

      - name: Setup pnpm
        if: steps.detect-pm.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Vercel CLI
        run: ${{ steps.detect-pm.outputs.global-cmd }} vercel@latest
      - name: Link Vercel project
        run: vercel link --yes --project ${{ github.event.repository.name }} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Set data repository env variable
        run: echo -n "$DATA_REPOSITORY" | vercel env add DATA_REPOSITORY ${{ inputs.environment }} --token ${{ secrets.VERCEL_TOKEN }}
        continue-on-error: true
      - name: Set GitHub API KEY env variable
        run: echo -n "${{ secrets.GH_TOKEN }}" | vercel env add GH_TOKEN ${{ inputs.environment }} --token ${{ secrets.VERCEL_TOKEN }}
        continue-on-error: true
      - name: Pull settings
        run: vercel pull --yes  --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --target=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --target=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}
